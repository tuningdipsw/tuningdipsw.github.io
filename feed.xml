<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.3">Jekyll</generator><link href="https://tuningdipsw.github.io/pages/tuningdipsw/feed.xml" rel="self" type="application/atom+xml" /><link href="https://tuningdipsw.github.io/pages/tuningdipsw/" rel="alternate" type="text/html" /><updated>2024-01-12T03:48:52+00:00</updated><id>https://tuningdipsw.github.io/pages/tuningdipsw/feed.xml</id><title type="html">Home of one of the Hellsinker. players of all time</title><subtitle>Dev blog for tuningdipsw's assorted projects.</subtitle><entry><title type="html">Further reading on Generative AI</title><link href="https://tuningdipsw.github.io/pages/tuningdipsw/meta/2024/01/11/regarding-gen-ai.html" rel="alternate" type="text/html" title="Further reading on Generative AI" /><published>2024-01-11T14:00:00+00:00</published><updated>2024-01-11T14:00:00+00:00</updated><id>https://tuningdipsw.github.io/pages/tuningdipsw/meta/2024/01/11/regarding-gen-ai</id><content type="html" xml:base="https://tuningdipsw.github.io/pages/tuningdipsw/meta/2024/01/11/regarding-gen-ai.html">&lt;p&gt;&lt;a href=&quot;https://ised-isde.canada.ca/site/strategic-policy-sector/en/marketplace-framework-policy/consultation-paper-consultation-copyright-age-generative-artificial-intelligence&quot;&gt;“Consultation on Copyright in the Age of Generative Artificial Intelligence” (2023)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Good day. I am writing in to express my concerns on the use of generative AI as an artist.&lt;/p&gt;

&lt;p&gt;Although I do not have any weigh-in on how the government might regulate or enforce the use of generative AI in its legislation, I’d like to raise these concerns about generative AI for the Government of Canada to consider.&lt;/p&gt;

&lt;p&gt;There are a number of detrimental effects to the current practice of generative AI that can be observed today. Some of these fall outside of the copyright domain that “Consultation on Copyright in the Age of Generative Artificial Intelligence” (2023) focuses on, but I will bring them up for your consideration.&lt;/p&gt;

&lt;p&gt;My general view is that genAI in the hands of bad actors has the potential to do great harm, and that the potential benefits of genAI are narrower as its most vocal proponents would have me believe, such that I do not believe that they outweigh the negatives of removing genAI from our internet ecosystem.&lt;/p&gt;

&lt;p&gt;However, I acknowledge the difficulties in regulating/legislating/enforcing genAI in the hands of the generic bad actor; Pandora’s Box has been opened, and we cannot put genAI back in the box.&lt;/p&gt;

&lt;p&gt;&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;degradation-of-the-trustworthiness-and-reliability-of-information-that-can-be-found-on-the-internet&quot;&gt;Degradation of the trustworthiness and reliability of information that can be found on the internet&lt;/h2&gt;

&lt;p&gt;Misinformation has always been a problem with the internet, but the ease with which genAI enables the production of misinformation has only served to amplify the issue.&lt;/p&gt;

&lt;p&gt;The modern internet has produced a financial incentive through ad revenue and search engine optimization to produce as much content as possible and push it to the forefront of our web searches, even at the detriment of accuracy. Incorrect information may even carry the risk of harm - consider information about, for example, identifying forest mushrooms that are safe to pick, foods that are safe for pets to eat, or natural remedies for health problems. Again, misinformation is not an issue that was introduced by genAI, but it has been exacerbated by it.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Aided by increasingly more sophisticated TDM, machine learning, and other technological advancements, AI can now create content that is difficult to distinguish from content created by human persons.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The difficulty of distinguishing AI-generated content from non- will remain a concern as long as AI-generated information remains unreliable; a first step to achieve this would be to disclose a list of sources that the content drew from. (This does not necessarily consider whether the sources were copyrighted or not, but there is some pertinence here.) “Explainability” seems to be the recognized word within the field.&lt;/p&gt;

&lt;p&gt;(There is some further expansion on explainability and bias in this excellent article: &lt;a href=&quot;https://rachel.fast.ai/posts/2023-05-16-ai-centralizes-power/&quot;&gt;https://rachel.fast.ai/posts/2023-05-16-ai-centralizes-power/&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;It is an especially concerning problem with the glut of generated content that genAI may start to include unreliable genAI content in its own training datasets. To achieve reliable information, AI-generated information must eventually point to non-generated sources.&lt;/p&gt;

&lt;p&gt;Of course, information from reputable sources can still be incorrect if poorly synthesized (or if the sources aren’t used at all), but this is an improvement over information produced from the ether. (Again, this applies to human-produced information as well.)&lt;/p&gt;

&lt;p&gt;(Data hallucination, where text generation is liable to produce “titles” with a correct syntactical format that do not actually exist, is a further extension of this issue. There was a newsworthy case in 2023 where lawyer Steven A. Schwartz’s used ChatGPT in court, only to discover that it had generated citations for a number of cases that did not exist.)&lt;/p&gt;

&lt;p&gt;It is not scalable (or even reliable) for humans to verify whether some content was or was not generated by AI, but some mechanism to identify AI-generated content is desirable. Voluntary disclosure would be helpful but is difficult to enforce. In my limited knowledge, machine tools purporting to analyze and identify AI-gen’d artwork have not been able to do so with consistency either (fittingly enough), and the reputational fallout of a false positive (witch hunting, etc) for artists has not been pretty to witness.&lt;/p&gt;

&lt;p&gt;Generated text itself is also difficult to enforce this with due to the ease with which it may simply be copied and pasted, although I imagine that with the impact that this has had in universities with regards to academic integrity, they probably have some weigh-in on this topic. Not that I am particularly fond of the authoritative hoops that plagiarism checking software (eg. Turnitin) and their ilk have imposed on students either. Perhaps there is something to dig into regarding the harmful futility of enforcing anti-cheat policies when it comes to this genAI discussion as well, but I will leave this discussion here for now.&lt;/p&gt;

&lt;h2 id=&quot;data-privacy-impersonation-and-defamatory-concerns&quot;&gt;Data privacy, impersonation, and defamatory concerns&lt;/h2&gt;

&lt;p&gt;Prior to genAI, it was already difficult enough to remove the traces of a photo from the internet, but the ability to diffuse someone’s likeness into compromising generated images is not an improvement on the revenge porn situation.&lt;/p&gt;

&lt;p&gt;“Deepfake porn” is discussed further here: &lt;a href=&quot;https://www.wired.com/story/deepfake-porn-is-out-of-control/&quot;&gt;https://www.wired.com/story/deepfake-porn-is-out-of-control/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I’ve also heard anecdotes about voice synthesis/generation being used to conduct impersonation scam phone calls (something along the lines of the Japanese “Ore Ore Sagi” scam). I believe it is even more difficult to identify generated voices than it is to identify generated images, especially if phone conditions provide poor sound quality.&lt;/p&gt;

&lt;p&gt;To my knowledge, reasonably accurate voice synthesis can be created with surprisingly little vocal material, but you may have to investigate this on your own. This is still a concern for public-facing figures who provide a great body of material to train off of, such as actors (especially voice actors), singers, and politicians, whose voices can now easily be manipulated to produce defamatory statements.&lt;/p&gt;

&lt;h2 id=&quot;concerns-surrounding-genai-within-the-japanese-creatives-community&quot;&gt;Concerns surrounding genAI within the Japanese creatives community&lt;/h2&gt;

&lt;p&gt;I recently read through a pair of articles by the Japanese illustrator You Shimizu, who discusses concerns with the state of AI in relation to image generation in 2023 and 2024 within the Japanese artist community. I thought their writing raised some pertinent points that may prove useful in the section afterwards. Both articles are written in Japanese, but Google Translate provides a readable translation of their core points.&lt;/p&gt;

&lt;p&gt;“&lt;em&gt;Results of a survey of painters regarding the learning of image generation AI and future considerations&lt;/em&gt;”
&lt;a href=&quot;https://note.com/freena_illust/n/n41043ec3a0a2&quot;&gt;https://note.com/freena_illust/n/n41043ec3a0a2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;-&amp;gt; A sizable portion of polled artists did not want to have their works trained upon, even if compensation would be offered.&lt;/p&gt;

&lt;p&gt;-&amp;gt; The use of publicly posted artworks as training data without permission has damaged the trust between artists and genAI users.&lt;/p&gt;

&lt;p&gt;-&amp;gt; There is a need for artists’ work to be protected from being trained upon through “opt-in” systems, as opposed to “opt-out” ones.&lt;/p&gt;

&lt;p&gt;-&amp;gt; The threat of having their work be trained upon without their consent has led some artists to pull their work from the internet, citing concerns about how the data will be used.&lt;/p&gt;

&lt;p&gt;-&amp;gt; Image generation AI provides increased “productivity”, but we can’t assume that this will correspond to increased profit.
“Unlike industrial products, painting is a field where it cannot be said that productivity = profit. The value of anything in excess can easily fall.”&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;“&lt;em&gt;Summary of the image generation AI situation in 2024, future considerations, and advice for budding creators&lt;/em&gt;”
&lt;a href=&quot;https://note.com/freena_illust/n/ne1442b0563c3&quot;&gt;https://note.com/freena_illust/n/ne1442b0563c3&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;-&amp;gt; This article summarizes some developments around image generation near the start of 2024.&lt;/p&gt;

&lt;p&gt;I’d like to highlight this tweet that is cited by the article:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/ednewtonrex/status/1733187760847274197&quot;&gt;https://twitter.com/ednewtonrex/status/1733187760847274197&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“People often say AI should be able to train on everything, without consent, because that’s how humans learn. Why should copyright stop AI learning, but not humans?&lt;/p&gt;

  &lt;p&gt;This is a false equivalence for at least two reasons.&lt;/p&gt;

  &lt;p&gt;First, AI scales. A single AI, trained on all the world’s content, can produce enough output to replace the demand for much of that content. No individual human can scale in this way.&lt;/p&gt;

  &lt;p&gt;Second, human learning is part of a long-established social contract. Every creator who wrote a book, or painted a picture, or composed a song, did so knowing that others would learn from it. That was priced in. This is definitively not the case with AI. Those creators did not create and publish their work in the expectation that AI systems would learn from it and then be able to produce competing content at scale. The social contract has never been in place for the act of AI training.&lt;/p&gt;

  &lt;p&gt;AI training is a different proposition from human learning, based on different assumptions and with different effects. It should be treated as such.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;-&amp;gt; The unclear copyright legal implications around AI generated work is scaring off some companies from using it.&lt;/p&gt;

&lt;p&gt;-&amp;gt; The negative reception of genAI work on social media adds a threat of reputational damage to companies that use it as well.&lt;/p&gt;

&lt;p&gt;-&amp;gt; These are also considerations to factor into the projected profitability of genAI.&lt;/p&gt;

&lt;h2 id=&quot;broader-effects-of-genai-on-creatives-livelihoods&quot;&gt;Broader effects of genAI on creatives’ livelihoods&lt;/h2&gt;

&lt;p&gt;The sentiments within the artist community including the constant feeling of having to compete against the threat of being replaced by AI, or otherwise, to eventually resign oneself to a principle defeat of integrating it into one’s tools and workflow.&lt;/p&gt;

&lt;p&gt;As mentioned above regarding voice synthesis/generation, voice actors are especially at risk of being replaced by the use of genAI.&lt;/p&gt;

&lt;p&gt;Translator discourse has pointed to the shift towards machine translation allowing companies to replace translators with cheaper “MTL editors”.
In practice, these editors have reported that the lacking quality and nonsensical choices produced by MTL mean that it is actually easier for them to translate from the source text directly than to work with the MTL, so companies are more or less just using the promised ability of MTL to justify underpaying their translators.&lt;/p&gt;

&lt;p&gt;Some discussion of this in these two sources by experience JP-&amp;gt;EN translators:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.reddit.com/r/LightNovels/comments/181ct0c/official_ln_translatior_on_the_effects_of_mtl/&quot;&gt;https://www.reddit.com/r/LightNovels/comments/181ct0c/official_ln_translatior_on_the_effects_of_mtl/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/DistantValhalla/status/1738140236369072543&quot;&gt;https://twitter.com/DistantValhalla/status/1738140236369072543&lt;/a&gt; (thread reproduced below)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;This is either complete naivete on the part of the JP side, or corporate nonsense designed to assuage the consumer in a deceptive manner. Let me break it down below.&lt;/p&gt;

  &lt;p&gt;(quoting &lt;a href=&quot;https://twitter.com/magus_bride/status/1738118307985912165&quot;&gt;https://twitter.com/magus_bride/status/1738118307985912165&lt;/a&gt;, “The Ancient Magus Bride” ‘s response regarding the use of MTL in the translation of the manga. Not a thread, so please open it yourself.)&lt;/p&gt;

  &lt;p&gt;“unique machine translation tech with[…]editing and proofreading by professionals.”
In practice this means Mantra Corporation will be paid big bucks to MTL manga and pay an editor a pittance to massage the garbled output into readability. Quality is in no way assured here.&lt;/p&gt;

  &lt;p&gt;With post-editing machine TL, the work might as well have been originally translated in the first place. About as much or more time/labor is spent undoing mistakes made by the machine, at a fraction of the price because suits think it’s “just editing work” in comparison.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The old cry of ‘automation replaces labour, you Luddites’ has been used to decry the concerns of the creative community, rather unkindly. I’m not certain I can make a case that creatives are entitled to a job, but I would like to see their livelihoods protected.&lt;/p&gt;

&lt;p&gt;I believe there does theoretically exist interesting, artistic merits to thoughtful use of generative AI, but in practice the negatives far outweigh the benefits to the creative community.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“The Act exists to promote the creation and distribution of content, to foster investment and job creation, promote just rewards for creators, and to create a thriving marketplace that offers consumers choice and access to diverse content. [25]”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;“In addition to economic rights, the Act also grants authors certain moral rights in their works, including, where reasonable in the circumstances, a right to be attributed as the author where one’s work is reproduced or used in other enumerated ways.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Although this consultation focuses on copyright concerns, I believe the unchecked use of genAI, as it is practiced today, has damaged the trust and artistic dignity of the creative sphere beyond a lack of economic recompense.&lt;/p&gt;

&lt;p&gt;At a minimum, I believe these three restrictions would be of benefit:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;genAI must disclose that a work is AI generated&lt;/li&gt;
  &lt;li&gt;genAI must disclose what sources were used to train/generate a work&lt;/li&gt;
  &lt;li&gt;use of a creator’s works for genAI training must be opt-in&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I do not know how they can or should be enforced or legislated, but I would like you to take these factors into consideration as you consider how genAI will be used in Canada.&lt;/p&gt;</content><author><name>minogame</name></author><category term="meta" /><summary type="html">“Consultation on Copyright in the Age of Generative Artificial Intelligence” (2023) Good day. I am writing in to express my concerns on the use of generative AI as an artist. Although I do not have any weigh-in on how the government might regulate or enforce the use of generative AI in its legislation, I’d like to raise these concerns about generative AI for the Government of Canada to consider. There are a number of detrimental effects to the current practice of generative AI that can be observed today. Some of these fall outside of the copyright domain that “Consultation on Copyright in the Age of Generative Artificial Intelligence” (2023) focuses on, but I will bring them up for your consideration. My general view is that genAI in the hands of bad actors has the potential to do great harm, and that the potential benefits of genAI are narrower as its most vocal proponents would have me believe, such that I do not believe that they outweigh the negatives of removing genAI from our internet ecosystem. However, I acknowledge the difficulties in regulating/legislating/enforcing genAI in the hands of the generic bad actor; Pandora’s Box has been opened, and we cannot put genAI back in the box.</summary></entry><entry><title type="html">September update</title><link href="https://tuningdipsw.github.io/pages/tuningdipsw/meta/2023/09/26/september-update.html" rel="alternate" type="text/html" title="September update" /><published>2023-09-26T15:00:30+00:00</published><updated>2023-09-26T15:00:30+00:00</updated><id>https://tuningdipsw.github.io/pages/tuningdipsw/meta/2023/09/26/september-update</id><content type="html" xml:base="https://tuningdipsw.github.io/pages/tuningdipsw/meta/2023/09/26/september-update.html">&lt;p&gt;Good day. It’s been a few months since my last update.&lt;br /&gt;
I took a break from working on this project in order to focus my full effort on finding employment. Unfortunately, this remains a continuing effort.&lt;br /&gt;
As that long try trusting in my current skills and experience turned up little, I’ve decided to return to self-study to salve the areas I lack in. &lt;!--more--&gt;
To start with, I’ve decide to commit to pushing through &lt;a href=&quot;https://www.theodinproject.com/&quot;&gt;The Odin Project&lt;/a&gt; in order to learn more full-stack technologies.&lt;/p&gt;

&lt;p&gt;As for the fighting game tutorial, the loss of momentum hurts me quite a bit.&lt;br /&gt;
I was already beginning to stall out on direction when I decided to take a break in March to focus on job searching, so it’s not surprising that I don’t have much drive to pick it back up again.&lt;/p&gt;

&lt;p&gt;I think I do want to work on a project of my own outside of the aforementioned full-stack study, but it might be better if it were something smaller than a fighting game.&lt;br /&gt;
The research material I was reading in my attempt to synthesize the next step of my game kind of overwhelmed me, I think. But it wasn’t a bad experience in programming or in writing, even if it didn’t make it very far.&lt;/p&gt;

&lt;p&gt;The desire to make this tutorial hasn’t died completely though. I’d like to come back and tackle it again someday in the future.&lt;/p&gt;

&lt;p&gt;The recent debacle with Unity, which shattered the trust developers had placed in them, pushed developers to other engines and frameworks, like Godot Engine. (Some amateur discussion of this appears in Article #0 of the tutorial.)&lt;br /&gt;
But &lt;a href=&quot;https://blood.church/posts/2023-09-14-whatistobedone&quot;&gt;an article encouraging developers to try writing their own engine&lt;/a&gt; caught my eye.&lt;/p&gt;

&lt;p&gt;I’d defaulted to options like LOVE2D and Pygame because I hadn’t known how to start with anything else, but this article spoke a lot about how to get started with the tools for making your own lower-level engine. I’ve become a little curious.&lt;br /&gt;
I’ve never done much low-level stuff, so I’d like to at least read about a little of the stuff that goes into making a framework or engine. It may be interesting to research even if I never quite get past the reading phase.&lt;br /&gt;
I haven’t fully formed an idea of what kind of bite-sized game I’d like to make for this, but it’s been on my mind.&lt;/p&gt;

&lt;p&gt;That’s all for now.&lt;br /&gt;
I will continue to tackle each task as they come.&lt;br /&gt;
Until next time.&lt;/p&gt;</content><author><name>minogame</name></author><category term="meta" /><summary type="html">Good day. It’s been a few months since my last update. I took a break from working on this project in order to focus my full effort on finding employment. Unfortunately, this remains a continuing effort. As that long try trusting in my current skills and experience turned up little, I’ve decided to return to self-study to salve the areas I lack in.</summary></entry><entry><title type="html">Let’s make a fighting game #3: Game state (1)</title><link href="https://tuningdipsw.github.io/pages/tuningdipsw/fgtutorial/2023/02/26/article3-game-state-1.html" rel="alternate" type="text/html" title="Let’s make a fighting game #3: Game state (1)" /><published>2023-02-26T14:00:00+00:00</published><updated>2023-02-26T14:00:00+00:00</updated><id>https://tuningdipsw.github.io/pages/tuningdipsw/fgtutorial/2023/02/26/article3-game-state-1</id><content type="html" xml:base="https://tuningdipsw.github.io/pages/tuningdipsw/fgtutorial/2023/02/26/article3-game-state-1.html">&lt;p&gt;&lt;a href=&quot;/fgtutorial/2023/02/06/article2-inputs.html&quot;&gt;« Prev: #2: Inputs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/fgtutorial/2023/02/12/article2-1-unit-testing-examples.html&quot;&gt;« Prev: #2.1: Unit testing examples&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Good day. In this series of articles, I’ll be attempting to program a simple 2D
fighting game using the Python game development library Pygame.&lt;/p&gt;

&lt;p&gt;We’ve created a system to translate key presses into logical buttons,
but they don’t &lt;em&gt;do&lt;/em&gt; anything yet; we have no concept of an action,
nor even a concept of a character with which to perform one.&lt;/p&gt;

&lt;p&gt;Let’s start getting that set up.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;eventual-goals&quot;&gt;Eventual goals&lt;/h2&gt;

&lt;p&gt;In addition to the holdover goals of “parsing inputs into actions”
and “accept buffered inputs” from article #2, we can add a few more goals
around our game state.&lt;/p&gt;

&lt;p&gt;The goals for our input system were easier to scope down by comparison, but,
well, the game state sort of encompasses everything a fighting game is –
the rules and numbers for everything that you CAN do, so I am at risk of just writing&lt;/p&gt;

&lt;p&gt;“Make a fighting game.”&lt;/p&gt;

&lt;p&gt;here and dusting my hands off, walking away, leaving everyone baffled.&lt;/p&gt;

&lt;p&gt;But, instead, I will do my best to spell out how each bit of game state we define will turn
our game into the fighting game we’re all familiar with.&lt;/p&gt;

&lt;h3 id=&quot;implement-saveable-loadable-state-as-required-by-rollback&quot;&gt;&lt;strong&gt;Implement saveable, loadable state, as required by rollback.&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;The task of serializing things, making saves of our state, and setting our state to that of a saved state
isn’t actually a very complicated or difficult problem for us to solve in Pygame,
but I’ll write this down anyways.&lt;/p&gt;

&lt;h3 id=&quot;define-characters-and-their-attacks-in-terms-of-hitboxes-and-hurtboxes&quot;&gt;&lt;strong&gt;Define characters and their attacks in terms of hitboxes and hurtboxes.&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Near all that a fighting game is, is defined by hitboxes, hurtboxes, and frame data.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;For a recap on hitboxes and hurtboxes, consult Dustloop’s &lt;a href=&quot;https://www.dustloop.com/w/Hitboxes&quot;&gt;hitboxes article&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If your attack hitbox collides with the opponent’s character hurtbox,
you apply the hit, and you reduce the opponent’s HP.&lt;/p&gt;

&lt;p&gt;Doesn’t sound so complicated, right?&lt;br /&gt;
You could say this simple principle of collision detection holds of many other games, such as Pong, or Space Invaders.&lt;/p&gt;

&lt;p&gt;But the fine nuance of interaction in a fighting game lies in the third dimension of time.&lt;br /&gt;
In order to codify the frames (unit of time) of the frame data into our game,
we need a particular object called a StateTimeline.&lt;/p&gt;

&lt;aside&gt;
Disclosure: I didn't have a full understanding of
how to handle state, animations, and time until I read through Zinac's
&lt;a href=&quot;https://github.com/rcmagic/DemoFighterWithNetcode/blob/master/game/StateTimelines.lua&quot;&gt;
DemoFighter,
&lt;/a&gt;
from which I am taking the term &quot;state timeline&quot; from.
I draw upon his open-source work with respect and gratitude.
&lt;/aside&gt;

&lt;h2 id=&quot;what-is-a-statetimeline&quot;&gt;(What is a StateTimeline?)&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/rcmagic/DemoFighterWithNetcode/blob/master/game/StateTimelines.lua&quot;&gt;In short, it’s what this code represents.&lt;/a&gt;&lt;br /&gt;
If you were able to get a sense for what that object was used for, feel free to skim through the following section.&lt;br /&gt;
But, for completeness, allow me to explain in excruciating detail.&lt;/p&gt;

&lt;p&gt;A fighting game allows its characters to perform a great variety of actions to choose from,
a tremendous offering of all sorts of attacks and movement.
In comparison, a game like a shmup offers the player only elementary actions.&lt;/p&gt;

&lt;p&gt;But the difference lies in &lt;em&gt;commitment&lt;/em&gt; -
the limitations on what actions a character can take while they’re performing another one.&lt;/p&gt;

&lt;p&gt;For example, a shmup requires the player maintain fine control of their ship at all times -
though the player is only offered two axes of movement, a shot button, and perhaps a bomb button,
they’re given great control over the granularity of how much or how little they want to move, fire, or bomb.&lt;br /&gt;
Not only that, all these systems can be operated simultaneously.&lt;br /&gt;
In general, high-commitment actions in STGs are quite rare, and the relative loss of fine control feels extremely wrong.&lt;/p&gt;

&lt;p&gt;Meanwhile, almost &lt;em&gt;every&lt;/em&gt; action in a fighting game has some degree of commitment attached to it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/article3/pot-5h-frame-data.png&quot; alt=&quot;+R Potemkin 5H from Dustloop&quot; /&gt;
&lt;em&gt;Example data of a fighting game attack, from &lt;a href=&quot;https://www.dustloop.com/w/GGACR/Potemkin#5H&quot;&gt;Dustloop.&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Every attack can be divided into startup, active, and recovery frames,
and for the most part, you only get to “cancel” your attack into something else after it’s hit something.&lt;/p&gt;

&lt;p&gt;So the startup frames are already a commitment - only when your attack comes into contact with your opponent
(active frames) are you allowed to take any possible cancel options (for some defined “cancel window”).&lt;br /&gt;
You are not free to perform &lt;em&gt;any&lt;/em&gt; action afterward, either -
you only have a choice from a limited list of valid cancel options,
else you’ll have to wait out the rest of your recovery frames like normal.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/article3/strive%20gatling%20table%20-%20NBSilentShadow%20-%20status%201404937791889416193.jpg&quot; alt=&quot;Strive gatling chart&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Chart of Strive’s valid “gatling” cancels for each attack.&lt;/em&gt;
&lt;em&gt;You don’t need to memorize this for this article.&lt;/em&gt;
&lt;em&gt;&lt;a href=&quot;https://twitter.com/NBSilentShadow/status/1404937791889416193&quot;&gt;(Source)&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;aside&gt;
These are general rules - there are edge cases where a whiffed move's recovery
or a move's startup can be canceled (see
&lt;a href=&quot;https://glossary.infil.net/?t=Purple%20Roman%20Cancel&quot;&gt;Strive PRC&lt;/a&gt; and
&lt;a href=&quot;https://glossary.infil.net/?t=Kara%20Cancel&quot;&gt;kara cancelling&lt;/a&gt;).
&lt;/aside&gt;

&lt;p&gt;And, if the attack never comes into contact with the opponent, or “whiffs”,
you’ll be unable to take any action at all until the end of the recovery frames.&lt;/p&gt;

&lt;p&gt;And, of course, there are some times when your character can’t perform any actions at all,
like when you’re in hitstun, blockstun, or have been knocked down.&lt;/p&gt;

&lt;p&gt;So in comparison to the shmup, where you can just do pretty much anything at any time,
the limitations on which actions can be taken at which times lends itself well to
modelling our fighting game with states.&lt;/p&gt;

&lt;p&gt;That’s the “state” part of “state timeline” -
so, as you might expect, the “timeline” captures the dimension of time.&lt;/p&gt;

&lt;p&gt;For each state we have in mind, be it a dash, an idle stance, or an attack,
each with their own hitbox and hurtbox dimensions,
animation sprites,
and cancel options,
we also attach the timelines, or the timings, for each property.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;When do the hitboxes first appear?&lt;/li&gt;
  &lt;li&gt;Do they change in shape on a later frame?&lt;/li&gt;
  &lt;li&gt;Do the hurtboxes change over the course of the state?&lt;/li&gt;
  &lt;li&gt;Every state has its own animation, of course -
which sprite images appear at which times of the state, and for how long?&lt;/li&gt;
  &lt;li&gt;Perhaps the attack causes the character to move around as well, like a teleport or a transport attack -
when does the movement begin? How much does it accelerate the character by?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The StateTimeline is an object that captures both the properties and the timings of a state.
Without it, our fighting game character can’t even perform an attack.&lt;/p&gt;

&lt;p&gt;With those properties explained, DemoFighter’s simple
&lt;a href=&quot;https://github.com/rcmagic/DemoFighterWithNetcode/blob/master/game/StateTimelines.lua&quot;&gt;StateTimeline&lt;/a&gt;
should hopefully make a lot more sense to you.&lt;br /&gt;
Note that DemoFighter only implements two states as timelines: an attack state and an idle state.
Cancel options aren’t included in their model – we’ll have to work that into our own implementation of the object.&lt;/p&gt;

&lt;h2 id=&quot;more-eventual-goals&quot;&gt;More eventual goals&lt;/h2&gt;

&lt;h3 id=&quot;store-and-handle-character-data-with-a-scalable-workflow&quot;&gt;&lt;strong&gt;Store and handle character data with a scalable workflow.&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Almost all games are really just composed of a lot of numbers,
and despite them looking like they’re just about two characters punching each other,
fighting games are no exception.&lt;/p&gt;

&lt;p&gt;Those timelines we showed off earlier are almost all composed of numbers,
so we can expect to have to manage quite a few of them.
Here’s an example of just a &lt;a href=&quot;https://www.dustloop.com/w/GGACR/Potemkin/Frame_Data&quot;&gt;single character’s frame data.&lt;/a&gt;
As you can see, there are quite a few numbers there.&lt;/p&gt;

&lt;p&gt;So you’ll have to come up with a way to manage all those numbers in a way
that’s easy to read, easy to update, and easy to generate.&lt;br /&gt;
Writing those numbers into your code directly will not do you any favours.&lt;br /&gt;
Hunting for a particular value will be difficult,
and the file probably won’t be set up so that you can easily compare one value to another by eye.&lt;/p&gt;

&lt;p&gt;Spreadsheet software handles numbers wonderfully.&lt;br /&gt;
Masahiro Sakurai (of Super Smash Bros. directing fame) talks a bit about this
in his video about &lt;a href=&quot;https://www.youtube.com/watch?v=nGaajB8m5Q0&quot;&gt;setting up parameters&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=nGaajB8m5Q0&quot;&gt;&lt;img src=&quot;/assets/images/article3/sakurai-on-parameters.png&quot; alt=&quot;Image link to Sakurai's video&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we want to wrangle large amounts of data, we need a good tooling workflow.&lt;/p&gt;

&lt;p&gt;Our plan is to:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Store our character data and frame data in a spreadsheet that we can easily manipulate.&lt;/li&gt;
  &lt;li&gt;Export and convert that into a format that our Python game can read (StateTimelines).&lt;/li&gt;
  &lt;li&gt;Have our game use those StateTimelines to give our attacks the desired properties.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;find-or-write-a-useful-tool-for-generating-hitbox-and-hurtbox-information&quot;&gt;&lt;strong&gt;Find or write a useful tool for generating hitbox and hurtbox information.&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Having a spreadsheet will be useful, but there’s another wrinkle in our workflow we’ll have to smooth out.&lt;/p&gt;

&lt;p&gt;If this game is just a proof of concept for our tutorial, it’s okay, and feasible, for us to
write exactly one attack and lay down a few numbers to define the
dimensions of each hitbox and hurtbox associated with it.&lt;/p&gt;

&lt;p&gt;However, as soon as we start wanting our game to have &lt;em&gt;plural numbers of attacks&lt;/em&gt;,
we will soon come to realize that attempting to define our character timelines by hand,
through manual data entry, is extremely painful.&lt;br /&gt;
Even though Zinac’s DemoFighter really only has an idle state and one attack,
you can still see how he had to write a whole bunch of strange magic numbers into
&lt;a href=&quot;https://github.com/rcmagic/DemoFighterWithNetcode/blob/master/game/StateTimelines.lua&quot;&gt;his data file&lt;/a&gt;
to define character hit/hurtboxes.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# StateTimelines.lua
# ...
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;damageBoxes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;26&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;attackBoxes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;120&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you go over to &lt;a href=&quot;https://www.spriters-resource.com/pc_computer/blazbluecentralfiction/sheet/108864/&quot;&gt;Spriter’s Resource&lt;/a&gt;
and download (eg.) Azrael from &lt;em&gt;BlazBlue Centralfiction&lt;/em&gt;’s sprites, you can “borrow” all the sprite images you want -&lt;/p&gt;

&lt;p&gt;But you’ll notice that the dimensions of each sprite aren’t consistent:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/article3/az202_04.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/article3/az202_05.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Two consecutive frames of Azrael’s 5C attack.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So, where should the anchor point of our game state x- and y-coordinates be, relative to this sprite?&lt;br /&gt;
And where should the hit-and-hurtboxes of this attack be, relative to our x,y-coords?&lt;br /&gt;
– Measuring which pixel should go where to define all those numbers is not practical.&lt;/p&gt;

&lt;p&gt;It’s not intuitive for humans to convert between raw positional numbers and images in their heads.
&lt;strong&gt;I will not be calculating and entering 5,000 numbers by hand&lt;/strong&gt;, and I hope you will not be either.&lt;/p&gt;

&lt;p&gt;I want to use a tool where I just click or drag boxes on my sprite image, and it prints out the Rect data for what I just did.
I do that a couple of times for the however many frames of my attack animation, and I have the h-boxes of my timeline.&lt;/p&gt;

&lt;p&gt;Can we find an existing tool?&lt;br /&gt;
Hmm. The MUGEN enthusiasts have to work with sprites all the time,
I imagine they’ve got to have a tool they use to define their hitboxes.&lt;/p&gt;

&lt;p&gt;A search for MUGEN hitboxes led me to the
&lt;a href=&quot;https://mugenguild.com/forum/topics/the-importance-hitboxeshurtboxes-and-why-they-matter-193823.0.html&quot;&gt;MUGEN Fighters Guild forums&lt;/a&gt;,
which mentioned the term CLSN. (Collision?)
That term led me to &lt;a href=&quot;https://www.youtube.com/watch?v=EDDIKSgXayw&quot;&gt;this tutorial&lt;/a&gt; for defining CLSN boxes
in a tool called &lt;a href=&quot;http://fighterfactory.virtualltek.com/&quot;&gt;Fighter Factory 3&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So we may wish to give this tool a try.
I will experiment with this when we start to move from a proof of concept into a scaled-up fighting game.
If it’s something we can incorporate into our workflow, awesome.&lt;br /&gt;
If not, then we’ll probably just have to make one ourselves.&lt;br /&gt;
But we may still be able to draw some inspiration from this tool in terms of usability,
so we should still give it a try.&lt;/p&gt;

&lt;h2 id=&quot;simple-game-state-drawing-and-movement&quot;&gt;Simple game state, drawing, and movement&lt;/h2&gt;

&lt;p&gt;With our larger goals in mind, let’s start making changes to our code.&lt;/p&gt;

&lt;aside&gt;
* Q: Is this the post-edited version of the code? &lt;br /&gt;
A: ...
&lt;/aside&gt;

&lt;p&gt;Ok, prescient disclaimer from the future here - we have a lot of stuff to put together ahead of us,
and it’s not always going to be obvious, or even apparent, what the best way to write it is, until we write it.&lt;br /&gt;
So to prevent ourselves from going into a catatonic state of indecision from not knowing how to do it best,
we’re going to hack together some atrocious first-pass code,
giving ourselves something to work with that vaguely does what we want,
and then we’re going to delete 50% of it in post.*&lt;/p&gt;

&lt;p&gt;So don’t scream if you see some really ugly functions in the next 20 minutes,
just tell yourself the author’s going to fix that in the future, like I’m doing right now,
and the fear and revulsion should subside.&lt;/p&gt;

&lt;p&gt;Let’s make a GameState class to store our game state properties.
Off the top of my head, we’ll put the round timer and the two characters’ states in there.&lt;br /&gt;
Let’s also move the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;current_frame&lt;/code&gt; variable we had lying around in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main.py&lt;/code&gt; into there as well.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# gamestate.py
&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;__future__&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;annotations&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pygame&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pg&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;constants&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;inputs&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;inputs&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GameState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inputHistories&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InputHistory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inputHistories&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inputHistories&lt;/span&gt;
        
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;characters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Character&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;characters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;P1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Character&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inputHistories&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;P1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;P1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;characters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;P2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Character&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inputHistories&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;P2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;P2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;character&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;characters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;character&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_frame&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_frame&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;surface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Surface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# render characters
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;character&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;characters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;character&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And let’s add the Character class underneath it:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# gamestate.py
# ...
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Character&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inputHistory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InputHistory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; \
                 &lt;span class=&quot;n&quot;&gt;gameState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GameState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;player&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# Pass in references to other systems Character needs to know about
&lt;/span&gt;        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inputHistory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inputHistory&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gameState&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gameState&lt;/span&gt;
        
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;player&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;P1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xpos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# P2
&lt;/span&gt;            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xpos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;constants&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WINDOW_WIDTH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ypos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;constants&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WINDOW_HEIGHT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;
        
        &lt;span class=&quot;c1&quot;&gt;# TODO: probably want a special load_character helper
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;# for loading char's sprites en masse
&lt;/span&gt;        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;surface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Surface&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'assets/guy2.png'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;convert_alpha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        
        &lt;span class=&quot;c1&quot;&gt;# TODO: arbitrary placeholder values,
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;# would like to load this in from a character data file
&lt;/span&gt;        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxHp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxHp&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;walkspeed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
        
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;facingLeft&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
        
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;frame_number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'''
        Takes a frame_number, and updates self based on the Buttons pressed on that frame.
        '''&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# NOTE: Added a helper function in inputs.py to get the buttons dict for frame X
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;frame_buttons&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inputHistory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getFrameButtons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame_number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;frame_buttons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LEFT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;walkspeed&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;frame_buttons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RIGHT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;walkspeed&lt;/span&gt;
        
        &lt;span class=&quot;c1&quot;&gt;# Limits on xpos
&lt;/span&gt;        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;constants&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WINDOW_WIDTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xpos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xpos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;surface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Surface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We’ve added a very simple &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;update()&lt;/code&gt; function that uses our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;inputHistory&lt;/code&gt; to move our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Character&lt;/code&gt;s left and right.&lt;/p&gt;

&lt;p&gt;You might notice that there’s not actually very much game state that exists outside of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Character&lt;/code&gt;s
(ie. exists only in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GameState&lt;/code&gt;) apart from the round timer.&lt;/p&gt;

&lt;p&gt;We could choose to put &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Character&lt;/code&gt;-created objects (ie. projectiles like fireballs)
in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GameState&lt;/code&gt;, but it might make more sense to attach them to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Character&lt;/code&gt; class instead,
to make their ownership clearer.&lt;/p&gt;

&lt;aside&gt;
Although stage aesthetic can sometimes indirectly affect gameplay by making some attacks
harder to see, eg.
&lt;a href=&quot;https://streetfighter.fandom.com/wiki/Kanzuki_Beach#Trivia&quot;&gt;Kanzuki Beach&lt;/a&gt;'s
waves obscuring certain character projectiles.
&lt;/aside&gt;

&lt;blockquote&gt;
  &lt;p&gt;The stage itself might have some relevant state -
although it’s more common in traditional fighters that the stage itself has no direct impact on gameplay,
some games like Smash Bros or Injustice feature &lt;a href=&quot;https://youtu.be/ZTeFLQlS6EI?t=195&quot;&gt;stage interactables&lt;/a&gt;.&lt;br /&gt;
That state should go in a separate Stage class within &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GameState&lt;/code&gt;, to mark it as one of our rollbackable objects.&lt;/p&gt;

  &lt;p&gt;If our stage is purely aesthetic, though, it’s not part of the game state that needs to be saved as part of rollback,
so we could choose to put that off to some outside class that only touches our main.py render() loop.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We do need to render &lt;em&gt;something&lt;/em&gt; on our window just so we have some feedback
to see how &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;update()&lt;/code&gt; is working.&lt;br /&gt;
This calls for art.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/article3/guy.png&quot; alt=&quot;Guy sprite 1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Perfect.&lt;/p&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/article3/guy2.png&quot; alt=&quot;Guy sprite 2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Perfect.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# gamestate.py
# ...
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Character&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ...
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;surface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Surface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;rect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Rect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;surface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_rect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;rect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;midbottom&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xpos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ypos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        
        &lt;span class=&quot;n&quot;&gt;surface_facing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;surface&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;facingLeft&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;surface_facing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;surface_facing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;surface_facing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With some simple rendering code, we get something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/article3/render-guys-1.gif&quot; alt=&quot;The first moving guys&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;NB: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rect.midbottom = (self.xpos, self.ypos)&lt;/code&gt;
is a neat trick to align the middle of the sprite image’s bottom edge to (xpos,ypos).&lt;br /&gt;
For now, this is okay, but as we discussed above, the anchor point of most of our sprites won’t be so consistent.&lt;br /&gt;
We’ll need to modify this logic in the future.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;aside&gt;
Disclosure: A slight adjustment to our input system was made to support 2 players properly between articles.
It was simple enough that I feel confident leaving it as an exercise to the reader.
Alternatively, check `inputs.py` in the code repository.
&lt;/aside&gt;

&lt;h3 id=&quot;knowledge-couplings&quot;&gt;Knowledge couplings&lt;/h3&gt;

&lt;p&gt;Let’s take a moment to look at some of the couplings we’re planning with our classes.
We don’t necessarily need to torment ourselves over this prematurely,
but it also doesn’t hurt to take a step back from time to time
and see if we’ll write, or even, we’ve written, ourselves into a maintenance swamp.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;InputHistory does not need to know anything about GameState.&lt;/strong&gt;
Great! That’s what we set out to do at first, and that hasn’t changed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Character (an object stored within GameState) needs to know about its player’s InputHistory, but not the other player’s.&lt;/strong&gt;
That’s what we expected.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Character needs to know about the opponent’s Character.&lt;/strong&gt;
This is necessary in order to determine:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;whether to “turn around”/flip its sprites&lt;/li&gt;
  &lt;li&gt;whether relative direction “back” is left or right&lt;/li&gt;
  &lt;li&gt;whether opponent is low enough HP to (eg.) perform an &lt;a href=&quot;https://glossary.infil.net/?t=Astral%20Heat&quot;&gt;Astral Finish&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Character may need to know some GameState information.&lt;/strong&gt;
For most applications, you probably won’t need this, but there &lt;em&gt;are&lt;/em&gt; a few edge cases where you could use GameState:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;for stage interactables&lt;/li&gt;
  &lt;li&gt;for the &lt;a href=&quot;https://www.dustloop.com/w/GGACR/Zappa#Hello,_Three_Centipedes&quot;&gt;rare move influenced by round timer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Neat-o. The couplings seem manageable, perhaps even expected, so we’ll put up with them for the time being.&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GameState&lt;/code&gt; has access to the pair of inputHistories when it’s created in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main.py&lt;/code&gt;,
and we can pass inputHistory and gameState into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Character.__init__()&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# gamestate.py
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GameState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inputHistories&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InputHistory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inputHistories&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inputHistories&lt;/span&gt;

        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;characters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Character&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;characters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;P1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Character&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inputHistories&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;P1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;P1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;characters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;P2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Character&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inputHistories&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;P2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;P2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;characters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;P1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assignOpponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;characters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;P2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;characters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;P2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assignOpponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;characters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;P1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;   
&lt;span class=&quot;c1&quot;&gt;# ...
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Character&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inputHistory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InputHistory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; \
                &lt;span class=&quot;n&quot;&gt;gameState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GameState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;player&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inputHistory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inputHistory&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gameState&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gameState&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;player&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;P1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xpos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# P2
&lt;/span&gt;            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xpos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;constants&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WINDOW_WIDTH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;
        
&lt;span class=&quot;c1&quot;&gt;# ...
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To make getting the opposing Character’s attributes a little easier to type,
we &lt;em&gt;do&lt;/em&gt; do something slightly irresponsible:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Character&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ...
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;assignOpponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Character&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'''
        Part of initialization, but deferred until after both Characters have been created
        to prevent P1 from referring to P2 before P2 has been created.
        '''&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;opponent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opponent&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note that this is technically poor practice in Class design, because if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Character&lt;/code&gt; gets used in the future by some other library,
it is possible for them to create a valid &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Character&lt;/code&gt; without remembering to call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;assignOpponent&lt;/code&gt; afterward, causing errors.
It would be best if this could automatically be handled in initialization.
But since we don’t expect the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Character&lt;/code&gt; class to be passed around much,
only within &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gamestate.py&lt;/code&gt; and its tests, we’ll ease up a little here.&lt;/p&gt;

&lt;h3 id=&quot;walking&quot;&gt;Walking&lt;/h3&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# gamestate.py, Character()
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;frame_number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'''
    Takes a frame_number, and updates self based on the Buttons pressed on that frame.
    '''&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# NOTE: Added a helper function in inputs.py to get the buttons dict for frame X
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;frame_buttons&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inputHistory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getFrameButtons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame_number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;frame_buttons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LEFT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;walkspeed&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;frame_buttons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RIGHT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;walkspeed&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We dumped our movement code above into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Character.update()&lt;/code&gt; in a very straightforward way,
but it would be nice if we could move that into its own function.
Not only will it make &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;update()&lt;/code&gt; a little cleaner, it will be easier to write tests for if it has its own function.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# gamestate.py, Character()
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;frame_number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'''
    Takes a frame_number, and updates self based on the Buttons pressed on that frame.
    '''&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;frame_buttons&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inputHistory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getFrameButtons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame_number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame_buttons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LEFT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;frame_buttons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RIGHT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;walk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame_buttons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ...
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;walk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buttons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;facingLeft&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buttons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LEFT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forwardWalkspeed&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;backwardWalkspeed&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buttons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LEFT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;backwardWalkspeed&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forwardWalkspeed&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I’m not sure how common it is for forward and backwards walk speeds to be
&lt;a href=&quot;https://hisouten.koumakan.jp/wiki/Movement_Data#Walking&quot;&gt;different&lt;/a&gt;,
but I decided to throw it in here for fun.&lt;br /&gt;
To my knowledge, they’re usually made the same, but my understanding is that they have slightly uses in gameplay -&lt;br /&gt;
High backwalk speed helps you make your opponent’s attacks whiff,
while high forward walk speed helps you ensure your attacks don’t.&lt;/p&gt;

&lt;p&gt;If you wanted to make a character good at one of these but not the other,
you might choose to give them different walkspeeds.&lt;/p&gt;

&lt;h3 id=&quot;characterfacingleft&quot;&gt;character.facingLeft&lt;/h3&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# gamestate.py
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Character&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inputHistory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InputHistory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gameState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GameState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; \
                 &lt;span class=&quot;n&quot;&gt;player&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# ...
&lt;/span&gt;        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;facingLeft&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We haven’t done anything with it yet, but we did define the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Character&lt;/code&gt; property &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;facingLeft&lt;/code&gt;
to determine whether to flip our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Character&lt;/code&gt;.
It’
s actually a very pertinent part of state, not just a visual marker that flips our sprite horizontally.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# gamestate.py
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Character&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ...
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;frame_number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# ...
&lt;/span&gt;        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;faceOpponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isRightOfOpponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'''
        Note that the blocking direction check uses this directly,
        but general input flip (forward vs back), sprite flip, hit/hurtbox flip
        are determined by self.facingLeft instead,
        a value that isn't always updated every frame.
        '''&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;opponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xpos&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;faceOpponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'''
        Sets self.facingLeft based on Character's position relative to opponent Character.
        '''&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;facingLeft&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isRightOfOpponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For now, we just make each &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Character&lt;/code&gt; face their opponent on every frame,
but our desired logic is a little bit more complex. (See the end of chapter of aside for more information.)&lt;/p&gt;

&lt;h3 id=&quot;rendering-ui&quot;&gt;Rendering UI&lt;/h3&gt;

&lt;p&gt;Let’s add our first UI elements to our game, HP bars and a round timer.&lt;/p&gt;

&lt;p&gt;Although the HP bars reference an attribute that belongs to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Character&lt;/code&gt;s,
I think of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Character.render()&lt;/code&gt; as the function that renders the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Character&lt;/code&gt; sprite, and the sprite only.
So I feel that we should put our UI rendering in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GameState.render()&lt;/code&gt; instead.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# gamestate.py
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GameState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ...
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;surface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Surface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# render UI
&lt;/span&gt;        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;renderRoundTimer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;renderHpBars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        
        &lt;span class=&quot;c1&quot;&gt;# render characters
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;character&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;characters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;character&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Our round timer update logic will be a little basic, but it’ll get the job done for now.
With a bit of Rect finagling, we can easily put it on the top of the screen.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# TODO: may add more nuance to round timer than this
&lt;/span&gt;        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;round_timer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;round_timer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;constants&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FRAME_RATE_CAP&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# ...
&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;renderRoundTimer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;surface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Surface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'''
        Basic font-based method of rendering the round timer.
        '''&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;rounded_timer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;{:.0f}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;round_timer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;font&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rounded_timer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;constants&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WHITE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;rect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_rect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;rect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;midtop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;constants&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WINDOW_WIDTH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;HP bars aren’t too difficult either. We’ll draw a coloured, “full” rectangle of varying length
on top of a white, “empty” rectangle of static length.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;renderHpBars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;surface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Surface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'''
        Basic HP bar UI.
        '''&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;hp_bar_length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;constants&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WINDOW_WIDTH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
        
        &lt;span class=&quot;c1&quot;&gt;# P1
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;missing_hp_rect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Rect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hp_bar_length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;p1_hp_proportion&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;characters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;P1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;characters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;P1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxHp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;current_hp_rect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Rect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;missing_hp_rect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;current_hp_rect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hp_bar_length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p1_hp_proportion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# For P1, the last bit of HP is the rightmost one
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;current_hp_rect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;topright&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;missing_hp_rect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;topright&lt;/span&gt;
        
        &lt;span class=&quot;n&quot;&gt;pg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;constants&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WHITE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;missing_hp_rect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;constants&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_hp_rect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        
        &lt;span class=&quot;c1&quot;&gt;# P2
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;missing_hp_rect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Rect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hp_bar_length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;missing_hp_rect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;topright&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;constants&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WINDOW_WIDTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        
        &lt;span class=&quot;n&quot;&gt;p2_hp_proportion&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;characters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;P2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;characters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;P2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxHp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;current_hp_rect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Rect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;missing_hp_rect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;current_hp_rect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hp_bar_length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p2_hp_proportion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# For P2, the last bit of HP is the leftmost one (no change required)
&lt;/span&gt;        
        &lt;span class=&quot;n&quot;&gt;pg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;constants&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WHITE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;missing_hp_rect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;constants&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BLUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_hp_rect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We don’t have any way to actually lose HP yet, so let’s add a temporary little hack to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Character.walk()&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# gamestate.py
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;walk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buttons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;facingLeft&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buttons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LEFT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
                &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forwardWalkspeed&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;backwardWalkspeed&lt;/span&gt;
                &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# TODO: temporarily added to show HP loss
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buttons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LEFT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
                &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;backwardWalkspeed&lt;/span&gt;
                &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# TODO: temporarily added to show HP loss
&lt;/span&gt;            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forwardWalkspeed&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now backwalking causes you to lose HP. A strange game design choice, but for now,
it’s just the thing to help us visualize HP loss.&lt;/p&gt;

&lt;p&gt;With our character flipping and UI changes done, our game now looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/article3/walking-and-ui.gif&quot; alt=&quot;Walking, flipping, and UI&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;stopping-point&quot;&gt;Stopping point&lt;/h2&gt;

&lt;p&gt;This article is starting to get a bit long now, so we’ll cut it off here.&lt;br /&gt;
We introduced a fair few lofty long-terms goals, but we’ve hardly even started the immediate ones.&lt;br /&gt;
We have some basic actions taken based on input, and the skeletons of our game state classes,
but we’ve yet to add an actual attack to our fighting game.&lt;br /&gt;
But in article #3.1, we’ll actually implement our first &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StateTimeline&lt;/code&gt;. Look forward to it.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/tuningdipsw/fighting-game-tutorial/tree/article3-game-state-1&quot;&gt;Code for this article on GitHub.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;TODO: edit in link to #3.1&lt;br /&gt;
&lt;a href=&quot;/fgtutorial/2023/02/01/article3-1-game-state-2.html&quot;&gt;» Next: #3.1: Game state 2&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;aside-when-or-when-not-to-flip-a-character&quot;&gt;Aside: When or when not to flip a Character&lt;/h2&gt;

&lt;p&gt;The common rules for when or when not to flip &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Characters&lt;/code&gt; are…
I’m literally testing this out as I write this part out, they’re darn complicated.&lt;br /&gt;
You might want to boot up a fighting game to test these out yourself instead of just reading it,
it may be a bit tricky to parse through text alone.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Characters performing an attack generally don’t change their facing direction.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;This often means that if you do an anti-air attack right before your opponent jumps over you,
and it has a hitbox that’s more in front of your head than above or behind it, the lack of flip might cause it to miss.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;However, doing a move that passes through the opponent to cross them up
(eg. &lt;a href=&quot;http://www.dustloop.com/w/GGACR/Jam_Kuradoberi#Senri_Shinshou&quot;&gt;Jam’s crossup 236S~H&lt;/a&gt;)
might specifically change your facing direction.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Characters midjump do not change their facing direction until they land, jump in midair, or recover from an attack(?).
This has some implications on aerial attacks, like &lt;a href=&quot;https://glossary.infil.net/?t=Taco&quot;&gt;tacos.&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A character being put in hit/blockstun does not change their facing direction
until they exit stun (return to neutral) or are put in hit/blockstun again.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However, the check for inputting the correct blocking direction (always the direction &lt;em&gt;away from the opponent&lt;/em&gt;)
is done on attack contact and does &lt;strong&gt;not&lt;/strong&gt; use facingLeft’s value.
This gives us a further complication when parsing inputs:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;If you jump over your opponent and do an (eg.) air DP, your character will not flip,
so you &lt;strong&gt;don’t&lt;/strong&gt; have to flip your DP input directions.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If you jump over your opponent and try to block, it is not parsed as a direct action.&lt;br /&gt;
As with a normal jump, your character will not flip,
but you &lt;strong&gt;do&lt;/strong&gt; have to block in the away direction if you get hit by an attack, despite your character not flipping.&lt;br /&gt;
(Getting hit by an attack will put your character in hit/blockstun and then cause your sprite to flip.)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If you were in hit/blockstun and your opponent crosses over you, your character will not flip (immediately),
but you &lt;strong&gt;do&lt;/strong&gt; have to flip your blocking direction.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;There may be &lt;a href=&quot;https://glossary.infil.net/?t=Cross-up%20Protection&quot;&gt;crossup protection&lt;/a&gt; to help you block, though.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Generally it seems like these rules are a little fast and loose at times - here are some specific examples of quirks between games.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;In GBVS, pressing the Guard button midjump will flip your character as well.
Blocking with the Guard button will always blocks in the correct direction, so this is sort of a moot point for GBVS.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In GG, the input to &lt;a href=&quot;https://glossary.infil.net/?t=Faultless%20Defense&quot;&gt;FD&lt;/a&gt; in midair
(backwards direction and two attack buttons that are not S+H or ?+D) will not be flipped (like the DP input example),
but FDing will not cause you to flip direction.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;FD is maintained if you hold down the initial two attack buttons even if you release “back”,
and by remaining in this blocking state you can keep blocking attacks despite not holding a “backwards” direction.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;After blocking an attack this way, your character will flip because you entered a new state of blockstun,
but again, you will still correctly block even without holding a “back” direction by staying in FD state
(by holding down the two attack buttons).&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;MBAACC rules offer the defender some crossup protection by let them block both by holding backwards for their character &lt;em&gt;or&lt;/em&gt;
in the same direction that the offensive character is facing.
However, there’s still a trick for the attacker to get around this -
see &lt;a href=&quot;https://glossary.infil.net/?t=Sandori&quot;&gt;Sandori&lt;/a&gt; for more details.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As you can see, these rules are quite complicated indeed.&lt;br /&gt;
A little too complicated for now.&lt;br /&gt;
We’ll leave them be for this update, but we will have to account for them in the future.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;TODO: edit in link to #3.1&lt;br /&gt;
&lt;a href=&quot;/fgtutorial/2023/02/01/article3-1-game-state-2.html&quot;&gt;» Next: #3.1: Game state 2&lt;/a&gt;&lt;/p&gt;</content><author><name>minogame</name></author><category term="fgtutorial" /><summary type="html">« Prev: #2: Inputs « Prev: #2.1: Unit testing examples Good day. In this series of articles, I’ll be attempting to program a simple 2D fighting game using the Python game development library Pygame. We’ve created a system to translate key presses into logical buttons, but they don’t do anything yet; we have no concept of an action, nor even a concept of a character with which to perform one. Let’s start getting that set up.</summary></entry><entry><title type="html">Let’s make a fighting game #2.1: Unit testing examples</title><link href="https://tuningdipsw.github.io/pages/tuningdipsw/fgtutorial/2023/02/12/article2-1-unit-testing-examples.html" rel="alternate" type="text/html" title="Let’s make a fighting game #2.1: Unit testing examples" /><published>2023-02-12T15:00:00+00:00</published><updated>2023-02-12T15:00:00+00:00</updated><id>https://tuningdipsw.github.io/pages/tuningdipsw/fgtutorial/2023/02/12/article2-1-unit-testing-examples</id><content type="html" xml:base="https://tuningdipsw.github.io/pages/tuningdipsw/fgtutorial/2023/02/12/article2-1-unit-testing-examples.html">&lt;p&gt;&lt;a href=&quot;/fgtutorial/2023/02/06/article2-inputs.html&quot;&gt;« Prev: #2: Inputs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Good day. In this series of articles, I’ll be attempting to program a simple 2D
fighting game using the Python game development library Pygame.&lt;/p&gt;

&lt;p&gt;It is technically possible to write code without testing, in the same way that it
is technically possible to draw with your eyes closed.&lt;/p&gt;

&lt;p&gt;Both regular testing, by running your game, and automated testing,
by writing a suite of tests after making changes to your game,
allow you to be more confident about the correctness of your code,
and help catch bugs your new changes might introduce.&lt;/p&gt;

&lt;p&gt;You might feel that writing tests is an unnecessary chore.&lt;br /&gt;
I also felt that way before I wrote these tests,
but I think I wouldn’t have that gut reaction if I’d just found
just the tutorial I was looking for to show me how to do it.&lt;/p&gt;

&lt;p&gt;For that reason, I’ll be sharing a brief account of what I did to set up
unit testing for article #2. I hope you find it useful.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;manual-testing&quot;&gt;Manual testing&lt;/h2&gt;

&lt;p&gt;is just the act of running your game, or the relevant section of it,
and testing that whatever change you just made to the code:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;doesn’t immediately crash&lt;/li&gt;
  &lt;li&gt;does what you expected your code to do&lt;/li&gt;
  &lt;li&gt;doesn’t cause any obvious changes in the rest of your game&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And so, your normal development process (of any code, not just games)
is just a cycle of writing bits of your desired code in steps that should work,
running it and fixing the errors when it doesn’t, and slowly building on each of those steps
until the desired functionality has been achieved.&lt;/p&gt;

&lt;p&gt;Coding becomes a lot harder when you’re unable to figure out how to subdivide your problem into testable steps,
or if you try to write too much code in one go without testing; learning how to do this is part of learning to code.&lt;/p&gt;

&lt;p&gt;I believe my development process of article #2 went something like this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Cribbed a basic game loop and FPS counter off of a &lt;a href=&quot;https://coderslegacy.com/python/display-fps-pygame/&quot;&gt;tutorial&lt;/a&gt;
that I knew would work&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Set up the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;keybinds&lt;/code&gt; dictionary&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Figured out how to convert &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pg.key.get_pressed()&lt;/code&gt; into a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dict[Button, bool]&lt;/code&gt; using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;keybinds&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;keysPressedToInput()&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Started printing this dictionary of Buttons to console in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main.py&lt;/code&gt;, so I could see the buttons I pressed appear&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Added &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cleanSocdButtons()&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;keysPressedToInput()&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Started blitting the rendered text of each dictionary of Buttons to the screen with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;directionsToArrow()&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;attackButtonsToLetters()&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Fiddled around with the format of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;keybinds&lt;/code&gt;, changing it from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;key: str&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;key: list(str)&lt;/code&gt;
as a way of implementing macro keys nicely&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Defined the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Input&lt;/code&gt; class as a proper form of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dict[Button, bool]&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Defined the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;InputHistory&lt;/code&gt; class to replace the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;list[dict[Button, bool]]&lt;/code&gt; I was using in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main.py&lt;/code&gt;, and formalized
the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;append()&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;render()&lt;/code&gt; functions there&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Replaced the strings in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;keybinds&lt;/code&gt; with safer &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Button&lt;/code&gt; Enums&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Reverted &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;keybinds&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;key: Button&lt;/code&gt; and implemented the macro keys as a separate dictionary, because it made
the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;keysPressedToInput()&lt;/code&gt; logic neater&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;…all the while hitting the VSCode “Run without Debugging (Ctrl+F5)” button until I had a working input system,
and then going a little further with some refactoring at the end.&lt;/p&gt;

&lt;aside&gt;
The bug was that P,K,S would not appear if the Punch, Kick, or Slash keybinds
were pressed on their own, only from pressing the macro_PKS button.
&lt;br /&gt;
&lt;br /&gt;
When the `for` loop finally iterated to the macro_PKS keybind after handling the rest of the keybinds,
the macro_PKS not being down overwrote frame_buttons[Button.PUNCH] to `= False`, from the `= True` that had been set by the Punch keybind
(and so on).
&lt;/aside&gt;

&lt;p&gt;However, I had actually introduced a bug that I didn’t notice in my manual testing for some time
when I changed &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;keybinds&lt;/code&gt; from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;key: str&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;key: list(str)&lt;/code&gt;.
The details of the bug are not important, but the fact that I’d missed it for even a short period of time
made me think “I really need to set up some automated unit tests, I shouldn’t put this off any longer.”&lt;/p&gt;

&lt;p&gt;As your program gets larger and your codebase more complex, it becomes harder to hold
it all in your head and more tiring to test. At some point you’ll start missing things.
This is where you need to start automating your testing.&lt;/p&gt;

&lt;h2 id=&quot;automated-testing&quot;&gt;Automated testing&lt;/h2&gt;

&lt;p&gt;More specifically, &lt;em&gt;regression testing&lt;/em&gt; is the act of checking that things that you had working in the past
haven’t stopped working (haven’t regressed) after you’ve made a change. As you can imagine, the amount of
regression testing you need to perform only goes up as you code;
in order to keep that workload manageable, you have to automate it.&lt;/p&gt;

&lt;p&gt;Any programming language that people use to code &lt;em&gt;will&lt;/em&gt; have some libraries for testing.
Python’s main ones are &lt;em&gt;unittest&lt;/em&gt; and &lt;em&gt;pytest&lt;/em&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;As I am not an experienced coder, game programmer, or Pygame user,
I suspect my approach is likely imperfect. I’d love to hear more about how you’ve
set up your own Python and Pygame tests in the comments section below the article.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;what-functions-should-we-test&quot;&gt;What functions should we test?&lt;/h3&gt;

&lt;p&gt;Although it’s tempting to say “everything”, and perhaps if you’re very idealistic you said that too,
it is also possible to write more tests than you strictly need to. It’s not the end of the world
if you do, but if you’re smart and &lt;strong&gt;intentional&lt;/strong&gt; about which ones you skip, you may be able to save
some of your mental strength for other, more important tasks.&lt;/p&gt;

&lt;p&gt;I didn’t write tests for all of my functions -
for example, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;directionsToArrow()&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;attackButtonsToLetter()&lt;/code&gt; are untested because
they are basically helper functions simple enough to reason correctness,
and they are of low importance, since they don’t affect game logic, only rendering.&lt;br /&gt;
So I don’t expect to modify them in the future, and I don’t feel worried about skipping them.&lt;/p&gt;

&lt;p&gt;A further caveat we might run into is that some parts of games don’t translate well to automated testing.
Take our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;render()&lt;/code&gt; functions -&lt;/p&gt;

&lt;p&gt;It’s easy enough for us to verify by hand and by eye that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;render()&lt;/code&gt; is correct by running our program and checking
that it displays such-and-such, that it “looks right”,
but it’s hard to define what “correct” or “looks right” is at the code level.
Audio cues (“sounds right”) or responsiveness (“feels right”) have the same issue.&lt;/p&gt;

&lt;p&gt;As far as I know, we must take it on faith that Pygame will handle drawing, audio, and inputs
correctly; we trust that these aspects of this library we’re making use of have already been tested.&lt;/p&gt;

&lt;p&gt;That doesn’t mean that we can’t write any tests if our functions happen to touch Pygame even once,
but the easiest tests for us to write will be for code whose logic is cleanly separated from Pygame elements.&lt;/p&gt;

&lt;h3 id=&quot;how-do-we-test&quot;&gt;How do we test?&lt;/h3&gt;

&lt;p&gt;Although I expressed the difficulty of writing automated tests around Pygame, we’re not entirely helpless.
We can make some use of &lt;a href=&quot;https://docs.python.org/3/library/unittest.mock.html#the-mock-class&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unittest.mock&lt;/code&gt;’s functions&lt;/a&gt;
in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mock.call_count()&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mock.assert_called_with()&lt;/code&gt; family.&lt;/p&gt;

&lt;p&gt;That is, although our tests cannot verify how the results handled by the Pygame library “look” or “sound”,
we can write tests that verify that certain Pygame functions such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;surface.blit()&lt;/code&gt; are being called
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;X&lt;/code&gt; number of times and with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Y, Z...&lt;/code&gt; parameters.&lt;/p&gt;

&lt;p&gt;The actual “automated” part of running the tests can then be done with a single keyboard shortcut (in VSCode: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ctrl + ; then A&lt;/code&gt;)
whenever you feel the need to check for regressions (e.g. right before you do a manual test as part of your normal development).&lt;/p&gt;

&lt;p&gt;The tests themselves, through the use of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unittest&lt;/code&gt;/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pytest&lt;/code&gt; libraries, are pretty straightforward.
We’ll see what some of the actual tests look like shortly.&lt;/p&gt;

&lt;h3 id=&quot;what-tests-should-we-write&quot;&gt;What tests should we write?&lt;/h3&gt;

&lt;p&gt;As the name “unit testing” implies, we start with the smallest functions, the most atomic parts
of our code, and write tests to verify their correctness. We don’t worry so much about how
different modules work together, we plan to handle that with “integration tests”.&lt;/p&gt;

&lt;aside&gt;
See &lt;a href=&quot;https://blog.miguelgrinberg.com/post/how-to-write-unit-tests-in-python-part-2-game-of-life&quot;&gt;
Practical unittest and pytest example, part 2, &lt;/a&gt;
also represented in Additional reading below.
&lt;/aside&gt;

&lt;p&gt;Test coverage is the idea that your tests should cover 100% of the paths your code can take, and there are some
plugins that you can set up to calculate this percentage for you.
I didn’t set one up myself, but it is an option.&lt;/p&gt;

&lt;p&gt;In any case, covering all the code paths is the goal of your testing.&lt;br /&gt;
Test single cases, test overlapping cases, test functions that use other functions, and so on.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Custom user input requires especially careful input validation, although games don’t have as much of this as,
say, websites or apps do.&lt;/p&gt;

  &lt;p&gt;Think carefully about what inputs are possible to pass to a function, which ones you want to accept
and which ones should be rejected.
A good practice is for your function to begin by making assertions about its inputs, even those not from users,
just to define and check your assumptions about the inputs.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;test_cleansocdbuttons&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test_cleanSocdButtons()&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;I started with one of the simpler functions, since I wasn’t familiar with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pytest&lt;/code&gt; yet.&lt;/p&gt;

&lt;p&gt;Although I don’t have its original form any more, I probably wrote it as something like this at first:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# test/test_inputs.py
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_cleanSocdButtons_LR_neutral&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LEFT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RIGHT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DOWN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;expected&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LEFT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RIGHT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DOWN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cleanSocdButtons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expected&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This can be generalized to multiple test cases with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pytest&lt;/code&gt;’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parametrize&lt;/code&gt; annotation:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# test/test_inputs.py
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cleanSocdButtons_testcases&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# L+R = neutral
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LEFT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RIGHT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DOWN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LEFT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RIGHT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DOWN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;# U+D = neutral
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LEFT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RIGHT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DOWN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LEFT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RIGHT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DOWN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;# both rules at the same time
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LEFT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RIGHT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DOWN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LEFT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RIGHT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DOWN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pytest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parametrize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;test_input, expected&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cleanSocdButtons_testcases&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_cleanSocdButtons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cleanSocdButtons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expected&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This one wasn’t too hard, since the tested function doesn’t call any other functions,
interact with complex classes, and doesn’t even have many cases to cover. So we’ve got the hang of it now.
Maybe we had to do a little finagling with settings to get VSCode to detect the test (I think I had to
create a blank &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__init__.py&lt;/code&gt; file in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test&lt;/code&gt; folder), but we were able to get a simple test running.&lt;/p&gt;

&lt;h3 id=&quot;test_keyspressedtoinput&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test_keysPressedToInput()&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Now for the tricky one – this one has messier inputs and uses mocks.&lt;/p&gt;

&lt;p&gt;The first mock we’ll need to use is for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pygame.key.get_pressed()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Ok, we don’t actually need it - we could instead write our way around this
by rewriting the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;keysPressedToInput()&lt;/code&gt; function in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;inputs&lt;/code&gt;
to take in a list of key names as a parameter, instead of calling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pygame.key.get_pressed()&lt;/code&gt; within the function.
Then we just make that list the testcase input instead of intercepting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pygame.key.get_pressed()&lt;/code&gt; with a mock in this test.&lt;/p&gt;

&lt;p&gt;I didn’t do it this time because I wanted to learn how to get this mock to work,
but I don’t believe there’s a strong reason against doing so.&lt;/p&gt;

&lt;p&gt;Either way, we write a little helper function to convert
lists like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[locals.K_z, locals.K_x, locals.K_c, locals.K_v, locals.K_d]&lt;/code&gt;
into the Pygame &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;key.get_pressed()&lt;/code&gt; format (with all the empty spaces for keys unpressed):&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# test/test_inputs.py
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create_key_mock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pressed_key_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'''
    Takes a list of key names (pygame.locals, which are technically ints)
    and returns a simulated pygame.key.get_pressed() output with those keys pressed.
    '''&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pressed_key_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The other mock we’ll need is for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;inputs.keybinds&lt;/code&gt;:
While we could use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;inputs.keybinds&lt;/code&gt; to determine what &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pygame.locals.[key]&lt;/code&gt;s to feed into
our testcase inputs, if we think ahead, we’re eventually going to have to support
rebinding keys, so this might cause a temporary break in these tests when we make that change
and remove the hardcoded &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;keybinds&lt;/code&gt; definition in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;inputs&lt;/code&gt;. Sure, we can fix that when we get there,
but we can also try to handle that ahead of time.&lt;/p&gt;

&lt;p&gt;We’ll instead fix &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;keybinds&lt;/code&gt; to a dictionary in this test file and mock that into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;keysPressedToInput()&lt;/code&gt;
when we test it, so that our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pygame.locals.[key]&lt;/code&gt; test inputs are unaffected if
we change &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;inputs.keybinds&lt;/code&gt; in the future.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# test/test_inputs.py
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;default_keybinds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;default_keybinds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;locals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;K_7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LEFT&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;default_keybinds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;locals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;K_8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DOWN&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;default_keybinds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;locals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;K_9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RIGHT&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;default_keybinds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;locals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;K_SPACE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UP&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;default_keybinds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;locals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;K_z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PUNCH&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;default_keybinds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;locals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;K_x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KICK&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;default_keybinds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;locals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;K_c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SLASH&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;default_keybinds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;locals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;K_v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HEAVY&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;default_keybinds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;locals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;K_d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DUST&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;default_keybinds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;locals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;K_f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MACRO_PKS&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;default_keybinds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;locals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;K_g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MACRO_PK&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;default_keybinds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;locals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;K_h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MACRO_PD&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;default_keybinds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;locals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;K_j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MACRO_PKSH&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# yeah, this is a copy of what's in inputs.py right now
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Disclosure: It took me some time to figure out how to mock &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;keybinds&lt;/code&gt;,
because I initially tried to do it with&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;patch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;keybinds&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_keysPressedToInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mock_keybinds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test_input_keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expected_buttons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mock_keybinds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;return_value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default_keybinds&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ...
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;but this caused a strange KeyError when running the test.&lt;/p&gt;

&lt;p&gt;The annotation format of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@mock.patch.object(inputs, &quot;keybinds&quot;, default_keybinds)&lt;/code&gt;
is (one of) the correct way(s) to patch out &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;keybinds&lt;/code&gt; for a different object &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;default_keybinds&lt;/code&gt;,
I had apparently confused &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;return_value&lt;/code&gt; for the object itself.&lt;/p&gt;

&lt;p&gt;The final, parametrized version of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test_keysPressedToInput()&lt;/code&gt; looks like this:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# test/test_inputs.py
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keysPressedToInput_testcases&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# single key
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;locals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;K_z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PUNCH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;# all single keys
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;locals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;K_z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;locals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;K_x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;locals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;K_c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;locals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;K_v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;locals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;K_d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PUNCH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KICK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SLASH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HEAVY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DUST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;# macro keys
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;locals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;K_f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PUNCH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KICK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SLASH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MACRO_PKS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;# multiple macro keys
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;locals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;K_f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;locals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;K_h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PUNCH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KICK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SLASH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DUST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MACRO_PKS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MACRO_PD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;# macro + single
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;locals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;K_z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;locals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;K_f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PUNCH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KICK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SLASH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MACRO_PKS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;# simple SOCD
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;locals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;K_7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;locals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;K_9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Note: Mocking keybinds to default prevents test from breaking when hardcoded keys change
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pytest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parametrize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;test_input_keys, expected_buttons&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keysPressedToInput_testcases&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;patch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;keybinds&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default_keybinds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;patch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;get_pressed&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_keysPressedToInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mock_key_get_pressed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test_input_keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expected_buttons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mock_key_get_pressed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;return_value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;create_key_mock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test_input_keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;current_frame&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keysPressedToInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;expected&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create_buttons_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expected_buttons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expected&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note that we added another helper function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;create_buttons_dict()&lt;/code&gt; to convert our Button list in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;expected_buttons&lt;/code&gt; parameter
into a proper dict of Buttons (with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;False&lt;/code&gt; items for Buttons, since KeyErrors would occur if (eg.) Button.LEFT is missing
from the Dict when &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cleanSocdButtons()&lt;/code&gt; runs).&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# test/test_inputs.py
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create_buttons_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pressed_buttons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'''
    Takes a list of Buttons and returns a proper dict[Button, bool].
    '''&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;buttons&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;buttons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pressed_buttons&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buttons&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That helps us write a cleaner set of inputs and expected outputs in our test cases.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note that we have to make a small change to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Input()&lt;/code&gt; class in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;inputs&lt;/code&gt; to handle the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;==&lt;/code&gt; equality operator
in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;assert output == expected&lt;/code&gt;:
&lt;a href=&quot;https://stackoverflow.com/questions/390250/elegant-ways-to-support-equivalence-equality-in-python-classes&quot;&gt;(See this post for more details.)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# inputs.py
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__eq__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;isinstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buttons&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buttons&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_frame&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_frame&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end_frame&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end_frame&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NotImplemented&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;test_inputhistory_append&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test_inputHistory_append()&lt;/code&gt;&lt;/h3&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# test/test_inputs.py
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_inputHistory_append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ih&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InputHistory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;P1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ih&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create_buttons_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PUNCH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ih&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create_buttons_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PUNCH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;# test input deduplication
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;expected&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create_buttons_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PUNCH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ih&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ih&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expected&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;# regular case
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;ih&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create_buttons_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KICK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;expected&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create_buttons_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KICK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ih&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ih&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expected&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Our last test is pretty easy as well, as it doesn’t require any mocks.
The main behavior of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;append()&lt;/code&gt; that we’re interested in is the input deduplication,
so we check both the duplicate and non-duplicate case.&lt;/p&gt;

&lt;p&gt;I think it’s fine in this case because it makes sense for the testcases to be sequential,
but I think it’s slightly preferable to separate your tests into different cases instead of combining them into a single
mega-testcase function for function X, because if multiple tests fail at the same time,
the failure logs will only show the first failure.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Those are the tests I wrote. Rather light for now, but I’ll definitely need to write quite a few more
when I start laying out the complex particulars of the game state, and the game logic of the fighting game.&lt;/p&gt;

&lt;p&gt;For ease of viewing, the tests for my code can be found in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test/&lt;/code&gt; folder of my fighting game tutorial’s
&lt;a href=&quot;https://github.com/tuningdipsw/fighting-game-tutorial/tree/main/test&quot;&gt;GitHub repository,&lt;/a&gt;
and will be updated with new tests as I publish new chapters.&lt;/p&gt;

&lt;h3 id=&quot;bonus-the-debugger-a-useful-ide-feature&quot;&gt;Bonus: The debugger, a useful IDE feature&lt;/h3&gt;

&lt;p&gt;A great feature of contemporary IDEs is the ability to easily set breakpoints in your code.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/article2-1/debugger.png&quot; alt=&quot;VSCode's debugger&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In VSCode, you set or unset breakpoints by clicking the red circles to the left of the line numbers (1),
and the debugger will kick in when you choose to “Start Debugging (F5)”, or run a test with “Debug Test” instead of “Run Test”.&lt;/p&gt;

&lt;p&gt;After hitting a breakpoint, you can use the cassette buttons (2) to resume program flow, to step one line forward, etc, and
check what’s in each variable in the Variable pane (3).&lt;/p&gt;

&lt;p&gt;The debugger is generally easier to handle than adding &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;print()&lt;/code&gt; statements, finagling f-strings into the right formats to get
those variables’ values, reading through all the printed logs at once, and then remembering to delete those &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;print()&lt;/code&gt;
statements afterwards; it’s an invaluable tool for helping you figure out why your program or your tests aren’t working the way
you expect them to, and I recommend giving it a try.&lt;/p&gt;

&lt;p&gt;(Although I admit that adding a quick &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;print()&lt;/code&gt; statement is my first instinct at times, too.)&lt;/p&gt;

&lt;h2 id=&quot;additional-reading&quot;&gt;Additional reading&lt;/h2&gt;

&lt;p&gt;The main notes I found when searching for guides on writing tests for Pygame
were a pair of comments by u/bitcraft on the r/pygame subreddit.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.reddit.com/r/pygame/comments/5h177k/comment/dayky59&quot;&gt;(1) unit testing for pygame&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.reddit.com/r/pygame/comments/jqujoa&quot;&gt;(2) How are you guys unit testing your game(s)?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I found this post as well, and credit it for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;create_key_mock()&lt;/code&gt; helper function,
although it doesn’t offer much more insight than that.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/52917479/unit-testing-in-python-pygame-for-key-get-pressed&quot;&gt;StackOverflow post that suggested mocking pg.key.get_pressed()&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The remaining links are more general, but very helpful guides on how to use unittest and pytest.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://code.visualstudio.com/docs/python/testing&quot;&gt;VSCode’s guide on how to set up unit testing in Python&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.datacamp.com/tutorial/pytest-tutorial-a-hands-on-guide-to-unit-testing&quot;&gt;DataCamp’s tutorial on how to use PyTest, fixtures, and parametrize&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.miguelgrinberg.com/post/-how-to-write-unit-tests-in-python-part-1-fizz-buzz&quot;&gt;Practical unittest and pytest example, part 1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.miguelgrinberg.com/post/how-to-write-unit-tests-in-python-part-2-game-of-life&quot;&gt;Practical unittest and pytest example, part 2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.python.org/3/library/unittest.mock.html&quot;&gt;Python docs on how to use unittest.mock&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While looking into ways to actually automate the running of my unit test suite, I found
&lt;a href=&quot;https://medium.com/thelorry-product-tech-data/unit-testing-and-continues-integration-ci-in-github-action-for-python-programming-c8ad57fae3a1&quot;&gt;this tutorial on how to set up a GitHub action&lt;/a&gt;
to run the test and reject failing code after any push to the GitHub repository,
but this seemed excessive for a personal project that I was going to
test on my own local setup, so I did not attempt this.&lt;/p&gt;

&lt;h2 id=&quot;advance-to-the-next-article&quot;&gt;Advance to the next article&lt;/h2&gt;

&lt;p&gt;I hope this article was able to help you set up tests for your own game, and perhaps
realize that doing so isn’t as hard as you might have feared it was.&lt;/p&gt;

&lt;p&gt;Let’s return to developing our game in article #3.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/fgtutorial/2023/02/26/article3-game-state-1.html&quot;&gt;» Next: #3: Game state&lt;/a&gt;&lt;/p&gt;</content><author><name>minogame</name></author><category term="fgtutorial" /><summary type="html">« Prev: #2: Inputs Good day. In this series of articles, I’ll be attempting to program a simple 2D fighting game using the Python game development library Pygame. It is technically possible to write code without testing, in the same way that it is technically possible to draw with your eyes closed. Both regular testing, by running your game, and automated testing, by writing a suite of tests after making changes to your game, allow you to be more confident about the correctness of your code, and help catch bugs your new changes might introduce. You might feel that writing tests is an unnecessary chore. I also felt that way before I wrote these tests, but I think I wouldn’t have that gut reaction if I’d just found just the tutorial I was looking for to show me how to do it. For that reason, I’ll be sharing a brief account of what I did to set up unit testing for article #2. I hope you find it useful.</summary></entry><entry><title type="html">Let’s make a fighting game #2: Inputs</title><link href="https://tuningdipsw.github.io/pages/tuningdipsw/fgtutorial/2023/02/06/article2-inputs.html" rel="alternate" type="text/html" title="Let’s make a fighting game #2: Inputs" /><published>2023-02-06T14:00:00+00:00</published><updated>2023-02-06T14:00:00+00:00</updated><id>https://tuningdipsw.github.io/pages/tuningdipsw/fgtutorial/2023/02/06/article2-inputs</id><content type="html" xml:base="https://tuningdipsw.github.io/pages/tuningdipsw/fgtutorial/2023/02/06/article2-inputs.html">&lt;p&gt;&lt;a href=&quot;/fgtutorial/2023/01/30/article1-gameloop.html&quot;&gt;« Prev: #1: Introducing our game loop&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/fgtutorial/2023/01/31/article1-1-gameloop-tangents.html&quot;&gt;« Prev: #1.1: Game loop tangents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Good day. In this series of articles, I’ll be attempting to program a simple 2D
fighting game using the Python game development library Pygame.&lt;/p&gt;

&lt;p&gt;The first thing we need to create is the input system of our game.
Although it is an intriguing idea, we won’t be taking after &lt;em&gt;NetHack&lt;/em&gt; or &lt;em&gt;Dwarf Fortress&lt;/em&gt;
and binding actions to single buttons (no ‘q’ to quaff). We must
instead find a way to decide whether a player’s (eg.) “236P” input should trigger a
special move or a command normal (6P).&lt;/p&gt;

&lt;!--more--&gt;

&lt;blockquote&gt;
  &lt;p&gt;Numpad notation will be used in these articles. See
&lt;a href=&quot;https://www.dustloop.com/w/Notation&quot;&gt;Dustloop&lt;/a&gt; for a refresher on how to read
numpad notation.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;eventual-goals&quot;&gt;Eventual goals&lt;/h2&gt;

&lt;h3 id=&quot;display-inputs-on-screen&quot;&gt;&lt;strong&gt;Display inputs on screen.&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;It may help us to reference how other games show their inputs.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/article2/xrd-input-display.png&quot; alt=&quot;XRD's training mode&quot; /&gt;
Guilty Gear XRD&lt;em&gt;’s input display system. (source: own screenshot)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The slightly darker colour of some direction/button inputs indicate that the
direction/button is still being held down from the previous input state.&lt;/p&gt;

&lt;p&gt;The actions that these inputs evaluated to can also be displayed,
although the buttons are ordered chronologically bottom to top,
while the actions are top to bottom.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/article2/uni-input-display.png&quot; alt=&quot;UNICLR's training mode&quot; /&gt;
Under Night&lt;em&gt;’s input display system.&lt;/em&gt; &lt;a href=&quot;https://www.youtube.com/watch?v=I42_NwoYdQw&quot;&gt;&lt;em&gt;(video source)&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Does not visually distinguish between invalid or buffered inputs and valid inputs.
However, showing frame counts to indicate how long the player’s inputs remained in each state looks useful.&lt;/p&gt;

&lt;h3 id=&quot;avoid-hardcoding-keybinds-into-our-business-logic&quot;&gt;&lt;strong&gt;Avoid hardcoding keybinds into our business logic.&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/article2/plus-r-key-mapping-gui.png&quot; alt=&quot;+R's key mapping menu&quot; /&gt;
Guilty Gear XXAC+R&lt;em&gt;’s key mapping menu. For some reason, +R has a keyboard menu that maps to controller keys,&lt;/em&gt;
&lt;em&gt;and then a controller menu that maps those controller keys to game buttons, which is a little confusing.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We will need to support a number of input devices and customizable controls for our fighting game,
so we must avoid hardcoding specific keys into our business logic.&lt;/p&gt;

&lt;p&gt;A GUI for setting these keys in-game is a must, but we’ll put it off for now.&lt;/p&gt;

&lt;h3 id=&quot;contextually-parse-inputs-into-actions&quot;&gt;&lt;strong&gt;Contextually parse inputs into actions.&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Special inputs are a famous fixture of the fighting game genre, ranging from the simple quarter-circle forward (236) motion
to the infamous &lt;a href=&quot;https://glossary.infil.net/?t=Pretzel%20Motion&quot;&gt;pretzel motion&lt;/a&gt; (1632413).&lt;/p&gt;

&lt;aside&gt;
There exist arguments both for and against them as a barrier to entry.
&lt;a href=&quot;https://www.youtube.com/watch?v=1qEguZXyWjw&quot;&gt;(1) &lt;/a&gt;
&lt;a href=&quot;https://www.youtube.com/watch?v=xBKnlyMpp1s&quot;&gt;(2) &lt;/a&gt;
&lt;br /&gt;
&lt;br /&gt;
Some games such as GBVS and Fantasy Strike have also experimented with easier 1-button specials.
We'll be using the most traditional type of special inputs in this game, but I invite you to experiment with this idea.
&lt;/aside&gt;

&lt;p&gt;The fighting game inputs are highly contextual even among video games;
for many moves, the game has to consider our previous inputs as well as our current ones
in order to determine whether (eg.) 6P should lead to the command normal 6P, or the special move 236P.&lt;/p&gt;

&lt;p&gt;The exact logic of how to parse an input into one of multiple specific game actions, especially when the player has pressed
more buttons than necessary, as in the case of many &lt;a href=&quot;https://glossary.infil.net/?t=Option%20Select&quot;&gt;Option Selects&lt;/a&gt;,
can become extremely complex.&lt;/p&gt;

&lt;p&gt;Dustloop’s &lt;em&gt;BlazBlue&lt;/em&gt; page contains a reference of &lt;a href=&quot;https://www.dustloop.com/w/BBCF/Miscellaneous#Input_Priority&quot;&gt;input priority&lt;/a&gt; that
shows just how complex this system might become.
For special moves, we’ll lean on &lt;a href=&quot;https://hisouten.koumakan.jp/wiki/Controls#Skills&quot;&gt;&lt;em&gt;Soku&lt;/em&gt;’s simpler hierarchy&lt;/a&gt; for now,
since &lt;em&gt;BlazBlue&lt;/em&gt;’s hierarchy varies between characters.&lt;/p&gt;

&lt;p&gt;For the time being, we’ll keep the inputs we accept fairly simple. We can reference the section on &lt;em&gt;BlazBlue&lt;/em&gt;’s
&lt;a href=&quot;https://www.dustloop.com/w/BBCF/Miscellaneous#Input_Requirements&quot;&gt;“Input Requirements”&lt;/a&gt; for some sensible specs on how to parse
a special input.&lt;/p&gt;

&lt;h3 id=&quot;accept-buffered-inputs&quot;&gt;&lt;strong&gt;Accept buffered inputs.&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;An extension of the input system that allows more leniency during combos and defense.
The leniency of the buffer system varies between games, ranging from generous to
&lt;a href=&quot;https://twitter.com/TheFuntax/status/1321983553966669824&quot;&gt;nearly non-existent&lt;/a&gt;,
giving a slightly different feel to each game.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&quot;https://glossary.infil.net/?t=Buffer%20Window&quot;&gt;“Buffer Window”&lt;/a&gt; on the Fighting Game Glossary.&lt;/p&gt;

&lt;p&gt;Some inputs don’t cause an action (immediately), due to the character
being committed to some other action, or possibly the requested action being invalid during
the current state.&lt;/p&gt;

&lt;p&gt;If done close enough to the earliest valid frame that the action could take place,
a valid input may be “buffered” by the game to trigger the requested action on that earliest frame.&lt;/p&gt;

&lt;p&gt;However, if the input is performed too many frames before that earliest valid frame, or “outside of the buffer window”,
it is considered invalid and the game will not translate it into an action.&lt;/p&gt;

&lt;h2 id=&quot;starting-with-the-basic-game-loop&quot;&gt;Starting with the basic game loop&lt;/h2&gt;

&lt;p&gt;I’ve borrowed a version of the game loop with a FPS counter from
&lt;a href=&quot;https://coderslegacy.com/python/display-fps-pygame/&quot;&gt;this tutorial&lt;/a&gt;.
I’ve taken the liberty of separating some global constants and the FPS counter
class into separate files:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# constants.py
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WINDOW_WIDTH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;640&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;WINDOW_HEIGHT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;480&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;FRAME_RATE_CAP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;WHITE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;BLACK&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# fps_counter.py
&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pygame&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pg&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;constants&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FpsCounter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Clock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;font&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;font&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SysFont&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Verdana&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;font&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_fps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()),&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;constants&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WHITE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;fps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_fps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;font&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fps&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;FPS&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;constants&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WHITE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;constants&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WINDOW_WIDTH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# main.py
&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pygame&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pg&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;fps_counter&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fps&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;constants&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;pg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;window&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;constants&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WINDOW_WIDTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;constants&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WINDOW_HEIGHT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fpsCounter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FpsCounter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;processInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;constants&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BLACK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fps_counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;pg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;running&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;running&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;processInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fpsCounter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;constants&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FRAME_RATE_CAP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Running this game only displays a black screen with an FPS counter,
but this is a nice skeleton of a program for us to springboard off of.&lt;/p&gt;

&lt;h2 id=&quot;establishing-some-terminology&quot;&gt;Establishing some terminology&lt;/h2&gt;

&lt;aside&gt;
Not an official terminology, I'm inventing it on the spot right now.
&lt;/aside&gt;

&lt;p&gt;Our ultimate goal with the input system is to translate &lt;em&gt;keys&lt;/em&gt; to &lt;em&gt;buttons&lt;/em&gt; to &lt;em&gt;inputs&lt;/em&gt; to &lt;em&gt;actions&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Keys&lt;/strong&gt;&lt;br /&gt;
The raw inputs of an input device such as a keyboard, joystick, or controller.&lt;br /&gt;
We’ll start with keyboard support only for simplicity.&lt;/p&gt;

&lt;aside&gt;
Note: Don't get confused by the other macros,
a dash macro button should be handled as an unique button than a combination of multiple buttons.
&lt;/aside&gt;

&lt;p&gt;&lt;strong&gt;Buttons&lt;/strong&gt;&lt;br /&gt;
The “buttons” that your game supports.&lt;br /&gt;
In our case, this is the 4 cardinal direction keys (keyboard),
a 2-dimensional direction from a joystick,
the 5 attack buttons “Punch”, “Kick”, “Slash”, “Heavy Slash”, “Dust”,
and macro buttons for combinations like P+K+S or dash macro.&lt;/p&gt;

&lt;p&gt;We map our keys to our buttons.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Inputs&lt;/strong&gt;&lt;br /&gt;
The processed form of the buttons, after &lt;a href=&quot;https://www.hitboxarcade.com/blogs/support/what-is-socd&quot;&gt;SOCD cleaning&lt;/a&gt;
and macro button combinations have been applied.&lt;/p&gt;

&lt;aside&gt;
Technically, we will be storing the diagonal directions as a combination of two
cardinals, but logically we'll pretend those are a single diagonal.
&lt;/aside&gt;

&lt;p&gt;For leverless devices like the keyboard, multiple buttons for contradictory directions can be pressed
(Simultaneous Opposite Cardinal Directions),
so we need to clean SOCDs and translate them into one of the 8 directions, or the neutral direction.&lt;/p&gt;

&lt;p&gt;Devices with levers/joysticks can’t do this, so we just translate the 2-dimensional input into the
closest of the 8 directions, or neutral if the stick is in some defined deadzone.
It might be okay to handle that in “Buttons” instead of “Inputs”, but it probably doesn’t really matter.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Actions&lt;/strong&gt;&lt;br /&gt;
The actions performed by the character in game after parsing the inputs.&lt;/p&gt;

&lt;p&gt;NB: We will consider inputs independent of state, and actions dependent on it.
So inputs will use the absolute directions of left and right,
while actions will have to consider which side of the opponent a character is on,
and convert inputs’ “left or right” into forward or back.&lt;/p&gt;

&lt;p&gt;Due to this dependence on game state, the parsing of inputs into actions will
occur in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;update()&lt;/code&gt;, not &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;processInput()&lt;/code&gt;. This way, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;processInput()&lt;/code&gt; does not need
to know anything about game state.&lt;/p&gt;

&lt;h2 id=&quot;should-we-get-input-from-pygamekeyget_pressed-or-the-event-queue&quot;&gt;Should we get input from pygame.key.get_pressed() or the event queue?&lt;/h2&gt;

&lt;p&gt;While filling in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;processInput()&lt;/code&gt;, we hit a fork in the road.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# main.py
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;processInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Method (1): Use key.get_pressed()
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;parseKeysPressed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;# Method (2): Event queue (not used)
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;QUIT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;cleanupGame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cleanupGame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'''
    Run any cleanup before exiting the game.
    '''&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In Pygame, we have &lt;a href=&quot;https://www.pygame.org/docs/tut/newbieguide.html#managing-the-event-subsystem&quot;&gt;one of two choices&lt;/a&gt;
in how we handle input:&lt;br /&gt;
We can either ask Pygame for a list of keys that being pressed at this very moment,
or we can check Pygame’s event queue for a list of all the key presses and key releases
that have occurred since the last time we checked the queue (ie. called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;processInput()&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;As a queue, the event queue method will catch all inputs, even if performance drops.
If the performance of the game loop drops to 1 FPS, the queue will capture all frames’ worth of inputs
during that second, while &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;key.get_pressed()&lt;/code&gt; can only capture 1 frames’ worth of inputs.&lt;/p&gt;

&lt;p&gt;However, because it can capture multiple frames’ worth of inputs, the logic of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;processInput()&lt;/code&gt;
becomes harder to get right as well. Even if it did only capture one frames’ worth of inputs,
handling simultaneous button presses with the event queue requires juggling knowledge
of key presses and key releases, which is also a little tricky.&lt;/p&gt;

&lt;aside&gt;
I probably will revisit the event queue version of the `processInput()` eventually,
even if we never hit performance issues, just because it will make a good lesson
for the tutorial.
&lt;/aside&gt;

&lt;p&gt;As stated in article #1, we will not spend unnecessary time worrying about performance before we have to.
We’ll go with the simpler &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;key.get_pressed()&lt;/code&gt; method for now just to keep us moving forward;
if our game starts to have trouble maintaining 60 FPS, I will revisit this to make the switch.&lt;/p&gt;

&lt;h2 id=&quot;defining-the-keybinds&quot;&gt;Defining the keybinds&lt;/h2&gt;

&lt;p&gt;Let’s create a new file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;inputs.py&lt;/code&gt; to store our key, button, and input-related functions.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# inputs.py
&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;__future__&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;annotations&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# https://stackoverflow.com/questions/33533148
# For type hinting support.
&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Enum&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pygame.locals&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;locals&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pygame&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pg&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;constants&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;LEFT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;DOWN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;RIGHT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;UP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;PUNCH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;KICK&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;SLASH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;HEAVY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;DUST&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;MACRO_PK&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;MACRO_PD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;MACRO_PKS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;MACRO_PKSH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# define keybindings manually here
# TODO: eventually replace with a proper menu interface for rebinding keys
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keybinds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;keybinds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;locals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;K_7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LEFT&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;keybinds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;locals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;K_8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DOWN&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;keybinds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;locals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;K_9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RIGHT&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;keybinds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;locals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;K_SPACE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UP&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;keybinds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;locals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;K_z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PUNCH&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;keybinds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;locals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;K_x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KICK&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;keybinds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;locals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;K_c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SLASH&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;keybinds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;locals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;K_v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HEAVY&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;keybinds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;locals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;K_d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DUST&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;keybinds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;locals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;K_f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MACRO_PKS&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;keybinds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;locals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;K_g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MACRO_PK&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;keybinds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;locals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;K_h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MACRO_PD&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;keybinds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;locals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;K_j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MACRO_PKSH&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# ...
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A (literal) key-value pair dictionary stores our key mappings.
I’ve used Python’s &lt;a href=&quot;https://docs.python.org/3/howto/enum.html#&quot;&gt;Enum&lt;/a&gt; feature to define our buttons.&lt;/p&gt;

&lt;p&gt;You can use literal strings (“punch”, “kick”, etc) instead of Enums, as I did initially, but if you ever misspell one of these strings
(“puncg”) in your logic later down the line, the logic may fail silently, which is troublesome to debug.
Enums will cause an error at runtime if misspelled, so they are safer to use.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# inputs.py
# ...
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;macro_defs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;macro_defs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MACRO_PK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PUNCH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KICK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;macro_defs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MACRO_PD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PUNCH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DUST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;macro_defs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MACRO_PKS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PUNCH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KICK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SLASH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;macro_defs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MACRO_PKSH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PUNCH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KICK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SLASH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HEAVY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;keysPressedToInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'''
    Takes an int current_frame,
    checks pygame.key.keys_pressed() for all keys currently pressed,
    and returns an Input created with a dict of all assigned Buttons pressed
    (after SOCD cleaning) and current_frame.
    '''&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;keys_pressed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_pressed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;frame_buttons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keybinds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;frame_buttons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keys_pressed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;macro_button&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;macro_defs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;frame_buttons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;macro_button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;frame_buttons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;macro_button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;macro_defs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;macro_button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;frame_buttons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;frame_buttons&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cleanSocdButtons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame_buttons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame_buttons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_frame&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;#...
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We define some macro buttons as well, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;keysPressedToInput()&lt;/code&gt;, which neatly
translates the keys of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pg.key.get_pressed()&lt;/code&gt; into our Buttons.&lt;/p&gt;

&lt;p&gt;It eventually creates an Input,&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# inputs.py
# ...
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buttons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start_frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end_frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buttons&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buttons&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_frame&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start_frame&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end_frame&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end_frame&lt;/span&gt;
        
    &lt;span class=&quot;c1&quot;&gt;# https://stackoverflow.com/questions/390250
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__eq__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;isinstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buttons&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buttons&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_frame&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_frame&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end_frame&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end_frame&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NotImplemented&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# ...
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;after running the buttons through &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cleanSocdButtons()&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# inputs.py
# ...
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cleanSocdButtons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame_buttons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'''
    Takes a dict with each assigned Button pressed this frame, 
    and returns a copy of it with SOCD cases handled:
    - UP + DOWN = neutral, remove both
    - LEFT + RIGHT = neutral, remove both
    
    Note that these don't both have to be handled the same way.
    '''&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cleaned_inputs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;frame_buttons&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cleaned_inputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LEFT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cleaned_inputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RIGHT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cleaned_inputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LEFT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cleaned_inputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RIGHT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cleaned_inputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cleaned_inputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DOWN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cleaned_inputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cleaned_inputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DOWN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cleaned_inputs&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# ...
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;These functions are all we need to convert from Keys to Input.
We call these functions in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main.py&lt;/code&gt;’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parseKeysPressed()&lt;/code&gt; to create an Input.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# main.py
# ...
&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;inputs&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# ...
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_frame&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;inputHistoryP1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InputHistory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;P1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;inputHistoryP2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InputHistory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;P2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# ...
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parseKeysPressed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'''
    Checks what keys are currently being pressed, 
    and creates a corresponding Input in input_history.
    '''&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keysPressedToInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;inputHistoryP1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;aside&gt;
Download the Segoe UI Symbol font &lt;a href=&quot;https://freefontsdownload.net/free-segoeuisymbol-font-135679.htm&quot;&gt;here&lt;/a&gt;
and add it to an `assets` folder.

Thanks to &lt;a href=&quot;https://stackoverflow.com/questions/61974883/unicode-characters-not-showing-when-displaying-to-pygame&quot;&gt;
this StackOverflow answer&lt;/a&gt;
for how to render the Unicode directional arrows.
&lt;/aside&gt;

&lt;p&gt;We’ll store these Inputs in a slightly modified container class, InputHistory.
This allows us to implement some custom logic when adding new Inputs in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;append()&lt;/code&gt;,
and it also allows us to give it its own &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;render()&lt;/code&gt; method that we can slot right into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main.py&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# inputs.py
# ...
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InputHistory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;player&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;player&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;player&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# &quot;P1&quot; or &quot;P2&quot;
&lt;/span&gt;        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'''
        Takes an Input and adds it to self.inputs,
        and removes old inputs from self.inputs.
        '''&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buttons&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buttons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;# If input buttons are the same as last input,
&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;# combine it with last input instead of making a duplicate.
&lt;/span&gt;            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end_frame&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end_frame&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            
        &lt;span class=&quot;c1&quot;&gt;# Don't need to keep inputs after a certain amount of time has passed.
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;# Down/back charge history will be stored in game state,
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;# so deleting old inputs has no effect on charge moves.
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;surface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Surface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;font&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;font&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Font&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;assets/seguisym.ttf&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;# Print the newest inputs first, closer to the top.
&lt;/span&gt;            &lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            
            &lt;span class=&quot;n&quot;&gt;arrow_direction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;directionsToArrow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buttons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;attack_buttons&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attackButtonsToLetters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buttons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;input_string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arrow_direction&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attack_buttons&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end_frame&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_frame&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
            
            &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;font&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input_string&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;constants&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WHITE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;player&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;P1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;constants&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WINDOW_WIDTH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(The logic behind deleting old inputs is probably not perfect, but it probably doesn’t have to be, either.)&lt;/p&gt;

&lt;p&gt;We also implement some basic helper methods to convert Inputs into a text form, for InputHistory’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;render()&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# inputs.py
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;directionsToArrow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buttons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'''
    Takes a dict of buttons pressed,
    and returns a character of the arrow corresponding to their direction
    (or ' ' for neutral).
    
    It is assumed that the buttons have already been SOCD cleaned.
    '''&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buttons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LEFT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buttons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'↖'&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buttons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DOWN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'↙'&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'←'&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buttons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RIGHT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buttons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'↗'&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buttons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DOWN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'↘'&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'→'&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buttons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DOWN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'↓'&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buttons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'↑'&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;' '&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;attackButtonsToLetters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buttons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'''
    Takes a dict of buttons pressed
    and returns a string of letters (or ' ' for nothing)
    representing all attack buttons pressed.
    '''&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buttons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PUNCH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;P&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buttons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KICK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;K&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buttons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SLASH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;S&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buttons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HEAVY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;H&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buttons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DUST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;D&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can now add this into our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main.py&lt;/code&gt; game loop:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# main.py
# ... 
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;constants&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BLACK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fpsCounter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;inputHistoryP1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;inputHistoryP2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# no Inputs being added here right now
&lt;/span&gt;    
    &lt;span class=&quot;n&quot;&gt;pg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;running&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;running&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;processInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;current_frame&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_frame&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fpsCounter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;constants&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FRAME_RATE_CAP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And that’s all we need to get Inputs running and displayable.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/article2/input-display.gif&quot; alt=&quot;Gif of our game, inputs displaying in all their glory&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Nothing too glamorous, but it gets the job done.&lt;br /&gt;
Ah, pushing buttons to make all sorts of text spool out rapidly is quite fun.&lt;/p&gt;

&lt;h2 id=&quot;stopping-point&quot;&gt;Stopping point&lt;/h2&gt;

&lt;p&gt;Not a bad place to stop - our Inputs system seems to work fine,
and is decoupled enough from other systems that we shouldn’t need to
touch it much when we begin work on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;update()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We are missing a few things in the Inputs system, like a second set of keybindings for player 2,
there are some &lt;a href=&quot;https://en.wikipedia.org/wiki/Magic_number_(programming)&quot;&gt;magic numbers&lt;/a&gt;
littered around that need to be cleaned up at some point,
and we will need to bosh it around some more for GGPO, rollback, and netplay,
but it’s enough for now.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/tuningdipsw/fighting-game-tutorial/tree/article2-inputs&quot;&gt;&lt;img src=&quot;/assets/images/download-on-github.png&quot; alt=&quot;How to download from GitHub&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python main.py&lt;/code&gt; when in the same directory as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main.py&lt;/code&gt; to run it.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/tuningdipsw/fighting-game-tutorial/tree/article2-inputs&quot;&gt;I’ve uploaded the code for this article on GitHub here&lt;/a&gt;,
where you can read it in uninterrupted form, or download it to try it yourself.&lt;/p&gt;

&lt;p&gt;If we look back at our “Eventual goals”, we’ve currently managed “Display inputs on screen” and
“Avoid hardcoding keybinds into our business logic”.&lt;/p&gt;

&lt;p&gt;But before we can work on parsing our Inputs into actions, we’ll need to build up our game state.
We’ll begin tackling this in article #3.&lt;/p&gt;

&lt;p&gt;Coming to a blog, which is this one, at a time when it’s ready, which is soon (I hope). Look forward to it.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/fgtutorial/2023/02/26/article3-game-state-1.html&quot;&gt;» Next: #3: Game state&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;bonus-setting-up-some-unit-tests&quot;&gt;Bonus: Setting up some unit tests&lt;/h3&gt;

&lt;p&gt;I’ve also written a short mini-article on adding a few unit tests for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;inputs.py&lt;/code&gt;.&lt;br /&gt;
This is not necessary in order to build our game, but it is an important part of programming at large,
and I couldn’t find a direct mention of setting up tests within the Pygame tutorials,
so I thought I would share something about how I set mine up, and some of the resources I drew upon to do so.&lt;/p&gt;

&lt;p&gt;It’s more of a general Python or programming topic than a Pygame one, but I think it’ll be quite helpful to cover.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/fgtutorial/2023/02/12/article2-1-unit-testing-examples.html&quot;&gt;» Next: #2.1: Unit testing examples&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;article-meta&quot;&gt;Article meta&lt;/h3&gt;

&lt;p&gt;Code fragments make up the body of this article, but I’m not sure how effective it was.&lt;/p&gt;

&lt;p&gt;I think it’s better than writing pure abstract theory of what needs to be done,
but most of my non-code comments turned out rather light.
I am reasonably proud that my code is neat and well-commented enough to be self-documenting, at least in my opinion,
but it did make my non-code comments feel a bit obvious when I wrote them.&lt;/p&gt;

&lt;p&gt;But I think there is some merit to providing a logical order for looking through the code.&lt;br /&gt;
It feels more approachable than throwing a whole GitHub repository at the reader.&lt;br /&gt;
Learning to read through one of those is a useful skill, but it’s always a bit daunting.&lt;/p&gt;

&lt;p&gt;If you have any complaints or feedback about the format, please let me know in the comments below.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&quot;/fgtutorial/2023/02/26/article3-game-state-1.html&quot;&gt;» Next: #3: Game state&lt;/a&gt;&lt;/p&gt;</content><author><name>minogame</name></author><category term="fgtutorial" /><summary type="html">« Prev: #1: Introducing our game loop « Prev: #1.1: Game loop tangents Good day. In this series of articles, I’ll be attempting to program a simple 2D fighting game using the Python game development library Pygame. The first thing we need to create is the input system of our game. Although it is an intriguing idea, we won’t be taking after NetHack or Dwarf Fortress and binding actions to single buttons (no ‘q’ to quaff). We must instead find a way to decide whether a player’s (eg.) “236P” input should trigger a special move or a command normal (6P).</summary></entry><entry><title type="html">Let’s make a fighting game #1.1: Game loop tangents</title><link href="https://tuningdipsw.github.io/pages/tuningdipsw/fgtutorial/2023/01/31/article1-1-gameloop-tangents.html" rel="alternate" type="text/html" title="Let’s make a fighting game #1.1: Game loop tangents" /><published>2023-01-31T12:00:00+00:00</published><updated>2023-01-31T12:00:00+00:00</updated><id>https://tuningdipsw.github.io/pages/tuningdipsw/fgtutorial/2023/01/31/article1-1-gameloop-tangents</id><content type="html" xml:base="https://tuningdipsw.github.io/pages/tuningdipsw/fgtutorial/2023/01/31/article1-1-gameloop-tangents.html">&lt;p&gt;&lt;a href=&quot;/fgtutorial/2023/01/30/article1-gameloop.html&quot;&gt;« Prev: #1: Introducing our game loop&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is a bit of a side article to article #1 (Introducing our game loop), filled with bits
I thought were ultimately unnecessary to the main tutorial and ended up cutting
during my editing pass.&lt;/p&gt;

&lt;p&gt;Here are some fun bits of writing and hopefully informative I couldn’t quite bring myself to cut completely.
If you’re stuck in a tutorial-reading haze, I would really recommend just skipping to #2
instead of reading through this, but if you’d just like to read a little more,
I’ve left this here for you.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;game-loop-readings&quot;&gt;Game loop readings&lt;/h2&gt;

&lt;p&gt;The best literature on what the game loop pattern looks like, and how to do it well,
comes from two main articles:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Robert Nystrom’s &lt;a href=&quot;https://gameprogrammingpatterns.com/game-loop.html&quot;&gt;&lt;em&gt;Game Programming Patterns&lt;/em&gt;.&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Glenn Fiedler’s &lt;a href=&quot;https://gafferongames.com/post/fix_your_timestep/&quot;&gt;&lt;em&gt;Gaffer On Games: Fix Your Timestep!&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;(2) might be a little tricky to understand if you don’t have existing code
in front of you, but I think reading through (1) first will help you grasp the big ideas.&lt;/p&gt;

&lt;p&gt;Neither of these pages are particularly long, so I encourage you to give them a read, but
if you just want to crunch through the tutorials here, I’m hardly going to force you to do a reading assignment.&lt;/p&gt;

&lt;h2 id=&quot;some-definitions&quot;&gt;Some definitions&lt;/h2&gt;

&lt;h3 id=&quot;fps-and-frames-are-overloaded-terms&quot;&gt;(“FPS” and “Frames” are overloaded terms)&lt;/h3&gt;

&lt;aside&gt;
&lt;a href=&quot;https://wiki.gbl.gg/w/Dong_Dong_Never_Die/FAQ#.22The_frame_data_seems_off.2C_usually_I_can_react_to_a_25f_startup_move.22&quot;&gt;
Dong Dong Never Die's 100 FPS&lt;/a&gt; is a unique exception to this in fighting games.
The 60FPS standard has been ingrained in fighting games for a long time, so I don't recommend switching.
&lt;br /&gt;
&lt;br /&gt;
Another fun example of a non-60FPS game is
&lt;a href=&quot;https://shmups.wiki/library/Cho_Ren_Sha_68K&quot;&gt;ChoRenSha68k&lt;/a&gt;, a shmup programmed on 55FPS hardware;
when played on Windows PC instead of its native X68000, the player must handle ChoRenSha's challenges in
ever so slightly less time than they were designed to be handled in. Still doable, but just a little bit
more saucy.
&lt;br /&gt;
&lt;br /&gt;
&lt;a href=&quot;https://www.youtube.com/watch?v=_w8SBUWuzek&amp;amp;list=PL6PHQCxAqpJTA3R5hgkqVJChfIuecx2gh&quot;&gt;
Has an excellent FM chiptune soundtrack as well.&lt;/a&gt;
Reading the &lt;a href=&quot;https://shmuplations.com/chorensha68k/&quot;&gt;developer's interview&lt;/a&gt; about this game really impressed me
with what they were able to accomplish at the time.
&lt;/aside&gt;

&lt;p&gt;60FPS is a common performance minimum for most games.
We don’t expect to run into a major performance bottleneck with our relatively simple 2D graphics,
but if our game were to utilize systems like complex 3D models and lighting engines, we might have to start worrying about this.&lt;/p&gt;

&lt;p&gt;PC gaming enthusiasts have the privilege
of enjoying games at high frame rates (often 120FPS, possibly higher);
although even most modern fighting games these days cap their frame rate at 60FPS,
we could theoretically allow our game to run above 60FPS visually, for the benefit of
some theoretical buttery-smooth graphical effects.&lt;/p&gt;

&lt;p&gt;(We’re going to be making a sprite-based 2D fighter, where we have to supply each frame of the animation by hand,
so we don’t really have any buttery-smooth graphical effects to speak of. But it’s an idea.)&lt;/p&gt;

&lt;p&gt;(If hand-drawing or hand-supplying the sprites for each frame of animation sounds like a lot of work – it is!&lt;br /&gt;
That’s one of the main reasons why you might choose to work with 3D models instead.&lt;br /&gt;
I’m not so familiar with how to create, animate, and render 3D objects,
and I admit I have a fondness for hand-drawn animation, so I’ll be going with the 2D sprite-based route.)&lt;/p&gt;

&lt;p&gt;(…We’ll have to skimp out on going all out drawing these animations in this tutorial,
just so we can finish our code before 3023.)&lt;/p&gt;

&lt;p&gt;If we did so, we’d need to ensure that the actual logical frames of our fighting game,
the frames that dictate how long our characters’ actions take, remain at the fighting game standard of 60FPS,
in order to maintain the convention that players understand and expect.&lt;/p&gt;

&lt;p&gt;It might be nice to decouple the timing of frame-rendering from our input processing and our game state updating.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If our game performance suddenly tanks to 15FPS because our antivirus just launched a scheduled scan
and our computer suddenly doesn’t have the resources to lovingly render the sebum glands of (eg.) Mario’s nose,
it kind of sucks to see our gameplay (eg. the timing we press buttons to in our combo) slow down to quarter speed.&lt;/li&gt;
  &lt;li&gt;If we want to implement something like &lt;a href=&quot;https://youtu.be/F6Fx0T_3IWY?t=704&quot;&gt;Tekken 7’s cinematic slowdown&lt;/a&gt;,
we want the speed at which the characters take action to slow down without affecting the visual frame rate.&lt;br /&gt;
We probably wouldn’t want to change the speed at which input parsing is handled during these situations.&lt;/li&gt;
  &lt;li&gt;The time at which the game moves might even stop completely.
There are situations like &lt;a href=&quot;https://glossary.infil.net/?t=Super%20Flash&quot;&gt;superflashes&lt;/a&gt;
and most games’ round starts where the game state is paused, but inputs can continue to be entered in order to buffer moves.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This separation between the game-&lt;em&gt;performance&lt;/em&gt; frames that our graphics live in, the game-&lt;em&gt;logic&lt;/em&gt; frames that
the game state lives in, and the &lt;em&gt;real-time&lt;/em&gt; 1/60ths of a second our inputs live in is worth mulling over in your head.&lt;/p&gt;

&lt;p&gt;To restate this, the following three definitions of “frames”/”FPS” are different:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;The number of “frames” (pictures drawn to screen) shown per second, the &lt;em&gt;visual performance frames&lt;/em&gt;.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Normally 60FPS, but it’d be nice if it could be uncapped higher for visual smoothness,
or if performance drops during rendering didn’t affect the gameplay.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;The number of “frames” (smallest unit of in-game time) per second, within which the game state can change.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Constant 60FPS, by convention.&lt;br /&gt;
However, the rate at which game state advances may slow down or be frozen during certain game mechanics.&lt;br /&gt;
It might also be forced to slow down in online situations where the connection between two players is inconsistent.&lt;br /&gt;
(If your game stops receiving the opponent’s inputs, the game state shouldn’t advance.)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;The rate at which player inputs are processed by the game.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You could make this arbitrarily fast instead of 60FPS,
but 60FPS is more than enough fidelity to parse human input,
and making this different from the rate of game state change might introduce some easy-to-mess-up logic to the input parser.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Yes, these three definitions line up nicely with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;processInput()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;update()&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;render()&lt;/code&gt;
functions of our game loop, just in reverse order.&lt;/p&gt;

&lt;p&gt;As it stands, our current naive implementation of the timing clock at the base of the Game Loop ties these three together.
That doesn’t seem ideal.
Although it’s probably not the end of the world if they’re not all completely decoupled…&lt;/p&gt;

&lt;h2 id=&quot;can-we-make-it-better&quot;&gt;…Can we make it better?&lt;/h2&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;# https://gameprogrammingpatterns.com/game-loop.html#play-catch-up
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;previous&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getCurrentTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getCurrentTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elapsed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;previous&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;previous&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;lag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elapsed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;processInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Isn't this a little bit familiar?&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MS_PER_UPDATE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MS_PER_UPDATE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s look over this C code from article (1) for a game loop with fixed update time step and
variable rendering for a moment.&lt;/p&gt;

&lt;p&gt;Our game state is behind 1 or more fixed time steps (frames) where it needs to be,
so we advance it one MS_PER_UPDATE (frame) at a time until we’re up to date.
Finally, now that we’re in the frame we need to be in, we can render it.&lt;/p&gt;

&lt;p&gt;Hm. That sounds familiar.&lt;/p&gt;

&lt;p&gt;It sounds a little like the catch-up we do when we rollback our game state.&lt;/p&gt;

&lt;p&gt;Like we mentioned in article #1, we’re not going to worry about integrating this special
fixed-timestep update loop into our code quite yet. I know I have a tendency to get lost in
overthinking too much before I even start to code, so for now, we’ll start with
the naive game loop in article #2.&lt;/p&gt;

&lt;p&gt;But it’s a nice idea to keep in mind.&lt;/p&gt;

&lt;h2 id=&quot;other-questions&quot;&gt;Other questions&lt;/h2&gt;

&lt;h3 id=&quot;vsync&quot;&gt;…VSync?&lt;/h3&gt;

&lt;p&gt;My understanding of how VSync plays into our FPS theory isn’t too good, but I should point out that
the community recommended PC settings for minimal input delay in
&lt;a href=&quot;https://twitter.com/Super_Myoro/status/1468005468349943809&quot;&gt;&lt;em&gt;BBCF&lt;/em&gt;&lt;/a&gt; and
&lt;a href=&quot;https://twitter.com/Hursh191/status/1574203001681588224&quot;&gt;&lt;em&gt;Xrd&lt;/em&gt;&lt;/a&gt; both have VSync off,
so it shouldn’t be a major deal-breaker if we don’t support it.
We might add support for it or play around with some forced screen-tearing examples in a bonus chapter later on.&lt;/p&gt;

&lt;h3 id=&quot;could-we-use-multi-threading-to-decouple-processinput-update-and-render-instead&quot;&gt;Could we use multi-threading to decouple processInput(), update(), and render() instead?&lt;/h3&gt;

&lt;p&gt;…Maybe?
That sounds plausible…&lt;/p&gt;

&lt;p&gt;I’m not confident enough in my programming ability to try it, though.&lt;br /&gt;
I think it’ll be easier to get this right if we stick to a single-threaded approach for now.&lt;/p&gt;

&lt;h3 id=&quot;bonus-reading&quot;&gt;Bonus reading&lt;/h3&gt;

&lt;p&gt;The DemoFighter mentioned in #0.8 borrows a
&lt;a href=&quot;https://github.com/rcmagic/DemoFighterWithNetcode/blob/master/game/RunOverride.lua&quot;&gt;modified game loop&lt;/a&gt;
for LOVE2D/LUA with a fixed timestep and the ability to cap “frame skip” to avoid a spiral of death.&lt;/p&gt;

&lt;p&gt;Maybe it solves our problems?&lt;br /&gt;
I’d have to play around with it a bit more to understand what exactly the frame skip entails.&lt;/p&gt;

&lt;h2 id=&quot;go-to-the-next-article&quot;&gt;Go to the next article&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;/fgtutorial/2023/02/06/article2-inputs.html&quot;&gt;» Next: #2: Inputs&lt;/a&gt;&lt;/p&gt;</content><author><name>minogame</name></author><category term="fgtutorial" /><summary type="html">« Prev: #1: Introducing our game loop This is a bit of a side article to article #1 (Introducing our game loop), filled with bits I thought were ultimately unnecessary to the main tutorial and ended up cutting during my editing pass. Here are some fun bits of writing and hopefully informative I couldn’t quite bring myself to cut completely. If you’re stuck in a tutorial-reading haze, I would really recommend just skipping to #2 instead of reading through this, but if you’d just like to read a little more, I’ve left this here for you.</summary></entry><entry><title type="html">Let’s make a fighting game #1: Introducing our game loop</title><link href="https://tuningdipsw.github.io/pages/tuningdipsw/fgtutorial/2023/01/30/article1-gameloop.html" rel="alternate" type="text/html" title="Let’s make a fighting game #1: Introducing our game loop" /><published>2023-01-30T12:00:00+00:00</published><updated>2023-01-30T12:00:00+00:00</updated><id>https://tuningdipsw.github.io/pages/tuningdipsw/fgtutorial/2023/01/30/article1-gameloop</id><content type="html" xml:base="https://tuningdipsw.github.io/pages/tuningdipsw/fgtutorial/2023/01/30/article1-gameloop.html">&lt;p&gt;&lt;a href=&quot;/fgtutorial/2023/01/27/article0-8-rollback-prep.html&quot;&gt;« Prev: #0.8: Rollback (Pre-reading)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Good day. In this series of articles, I’ll be attempting to program a simple 2D
fighting game using the Python game development library Pygame.&lt;/p&gt;

&lt;p&gt;Teaching the game loop design pattern is a common part of any game programming tutorial,
so there’s already plenty of coverage on this topic on the internet,
but we’ll go over it again, since it is quite important, and it sets up our next few
topics quite nicely.&lt;/p&gt;

&lt;p&gt;I won’t be regurgitating the lessons of authors who’ve done it better, but I hope to
add some useful commentary on how the game loop looks in the context of our fighting game.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;distracting-aside&quot;&gt;Distracting aside&lt;/h2&gt;

&lt;p&gt;You know, I’ve come to realize that these writings are probably going to read more like a devblog than a tutorial.&lt;/p&gt;

&lt;p&gt;If I knew how to do the things I’m setting out to do already, then I would have the opportunity to
put together some quite clean and curt no-frills writing, as befits a tutorial. Getting to the point
is quite important, and it respects time of the reader who just wants to paste it and go. But as
it stands, I don’t quite know what will work or what will be good until I’ve tried to write it,
and perhaps not even then. So it is a little dishonest for me to try to write as if the information
I’m about to tell you is quite authoritatively excellent, or the code that I’m about to reproduce
is absolutely up-to-standard, best-practices stuff really, when I’m actually wracking my brain really
hard to try and reason out what I need to do before every new feature.&lt;/p&gt;

&lt;p&gt;Sometimes I don’t even do that
and I just type some of the doggest lines I’ve ever written to see if it works (which is a pretty good
approach to get yourself started and writing code, so let us not knock it). Really, trying to write a
tutorial without knowing what I’m about to do isn’t very easy on my end either.&lt;/p&gt;

&lt;aside&gt;
Incidentally, the Fall 2022 anime &lt;a href=&quot;https://en.wikipedia.org/wiki/Do_It_Yourself!!&quot;&gt;&lt;i&gt;Do It Yourself!!&lt;/i&gt;&lt;/a&gt;
was an excellent watch that more than lived up to my iyashikei expectations for the season.
Quite light and quite fun. A worthwhile watch for those looking to fill their own iyashikei needs.
&lt;/aside&gt;

&lt;p&gt;Anyways, I just wanted to get that out there before I place some of the smartest-looking dumb words ever
to be put together before you. I think I’m going to end up writing a lot of segments in post to correct
or improve the things I’m about to put forth. But that’s the fun of Doing It Yourself, I guess. Let’s learn a thing or two, together.&lt;/p&gt;

&lt;p&gt;And I apologize to you, my readers who must sit through my long-winded foolishness in order to glean
even a spark of potentially useful insight.&lt;br /&gt;
And I thank you for reading through it anyways.&lt;br /&gt;
I would love to assemble a cleaner version of this text when I’ve put this whole thing together.&lt;/p&gt;

&lt;p&gt;And now, we return you to our feature programming.&lt;/p&gt;

&lt;h2 id=&quot;game-loop-reading&quot;&gt;Game loop reading&lt;/h2&gt;

&lt;p&gt;The basic game loop that you’ll find in any game library tutorial, like
&lt;a href=&quot;https://www.patternsgameprog.com/discover-python-and-patterns-8-game-loop-pattern&quot;&gt;this one&lt;/a&gt;
or &lt;a href=&quot;https://coderslegacy.com/python/display-fps-pygame/&quot;&gt;that one&lt;/a&gt;
looks something like this:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;processInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;clock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Ok, this is a bit of a simplification, but pseudocode is fine for now.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;adding-rollback-to-the-mix&quot;&gt;Adding rollback to the mix&lt;/h2&gt;

&lt;p&gt;Neatly enough, our basic game loop already has updating state and rendering state cleanly separated.
That core requirement of rollback isn’t hard for us to fulfill in Pygame.&lt;/p&gt;

&lt;p&gt;We actually have seen what our game loop might look like with rollback in our earlier rollback reading:&lt;/p&gt;

&lt;aside&gt;
Interesting note: The presenter mentions that skipping saving the game state in all but the last simulated frame
allowed them to eke out some performance gains in the worst-case scenario.
The tradeoff is that they had to rollback more frames in the average rollback scenario.
&lt;br /&gt;
&lt;br /&gt;
See &lt;a href=&quot;https://youtu.be/7jb0FOcImdg?t=1879&quot;&gt;31:19 of the NRS GDC talk&lt;/a&gt;.
I don't expect performance to be one of our main worries, so we'll just save it in each of ours.
&lt;/aside&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/article1/nrs-gameloop-tick-diagram.png&quot; alt=&quot;Game loop diagram breakdown of what happens in a rollback frame, from NRS' GDC talk&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Game loop breakdown of what happens in a rollback frame, from &lt;a href=&quot;https://youtu.be/7jb0FOcImdg?t=1412&quot;&gt;NRS’ GDC talk&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The rough code for a gameloop accounting for rollback probably looks something like this:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;running&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# --- processInputs() starts here ---
&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;processLocalInputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sendLocalInputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Rollback prediction: if no remote inputs are received this frame,
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# rollback fills in a repeat of last known input
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;receiveRemoteInputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;inputs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;local_inputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remote_inputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# If remote inputs were received, check that they match the prediction.
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# Then return the frame number of the last correct frame.
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# (If the prediction has been correct, this is the current frame.)
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;frame_to_rollback_to&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;checkRemoteInputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# --- processInputs() ends here ---
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# --- update() starts here ---
&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;frame_to_rollback_to&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;loadFrameState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame_to_rollback_to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;# Simulated frames
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;frame_to_rollback_to&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;advanceGameState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;frame_to_rollback_to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;saveFrameState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame_to_rollback_to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;frame_to_rollback_to&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;frame_to_rollback_to&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Real frame
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;advanceGameState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;saveFrameState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;current_frame&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_frame&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# --- update() ends here ---
&lt;/span&gt;    
    &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;game_state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;clock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FRAME_RATE_CAP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Actually, consulting the
&lt;a href=&quot;https://github.com/pond3r/ggpo/blob/master/doc/DeveloperGuide.md#synchronizing-local-and-remote-inputs&quot;&gt;GGPO Developer Guide&lt;/a&gt;,
a lot of the parts like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;receiveRemoteInputs()&lt;/code&gt; and when to call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;saveFrameState()&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;loadFrameState()&lt;/code&gt; are handled by GGPO.
So our loop will look a little different when we integrate that in.&lt;/p&gt;

&lt;p&gt;But this is the rough look of the logic underneath, if you need to implement the things GGPO does yourself.&lt;/p&gt;

&lt;h2 id=&quot;could-we-do-better&quot;&gt;Could we do better?&lt;/h2&gt;

&lt;p&gt;If you’re familiar with some of the literature on game loops, you might notice that
this version of the game loop is a little imperfect, as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;update()&lt;/code&gt; is still
somewhat bound to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;render()&lt;/code&gt;. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;update()&lt;/code&gt; does have the ability to handle multiple frames of updates per loop,
but it’s doing it more to handle rollbacks than to handle a slow &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;render()&lt;/code&gt; function.&lt;/p&gt;

&lt;aside&gt;
And as anyone who has played against me on my goopy laptop, struggling to hit 60FPS in Strive or GBVS, can attest.
&lt;/aside&gt;

&lt;p&gt;But I’m going to argue that it’s not the end of the world for now if we bind these together:
it’s not uncommon for fighting games to slow down to the speed of the performance of the slower computer
when playing online, as we alluded to at the end of the rollback article (Mauve’s articles).&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If one game is running slower than another, dropping a frame here or there, it &lt;strong&gt;cannot&lt;/strong&gt; be treated the same as if it were a packet loss. This is because you lose that bonus extra buffer of delay you added to compensate for it, and get effectively nothing of value out of it. Obviously, this isn’t desirable.&lt;/p&gt;

  &lt;p&gt;This leads to the most important rule of this sort of network code: The goal is to maintain complete synchronization with the other system. This &lt;strong&gt;includes&lt;/strong&gt; performance issues. If one has a drop, this drop must be reflected in the other as well. Always. Anything else will lead to a desynchronization of the intended behavior.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Note that this refers to drops in the rate that the game state is updating
(and transmitting the inputs that influence how game state updates).
If the drops are only in the rendering rate and not the inputs/updates, they are of course not affecting the game state,
so you wouldn’t have to force the remote computer to reflect that drop.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://words.infil.net/w02-netcode-p5.html&quot;&gt;Infil’s article, part 5&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Solving the problem is relatively straightforward. Most rollback systems will briefly pause the player who is ahead for 1 or 2 frames so the player who is behind can catch up. If the game keeps on top of this system and never lets the games drift very far apart, the correction will be quick and painless. Note that these pauses are not due to missing input or other networking difficulties; they are designed to fix the fact that different computers will run software at slightly different rates in unpredictable ways, and losing 1 frame every 10 seconds to maintain the sync is unnoticeable to even the most astute players.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It’s not ideal that how fast our game moves can be slowed down by how fast it can render,
but it is passable.&lt;/p&gt;

&lt;p&gt;We’re going to start off with this naive game loop for now, just so we can get building.&lt;/p&gt;

&lt;p&gt;The main thing we’re worried about is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;render()&lt;/code&gt; being too slow to hit 60FPS and dragging down our game speed,
but it’s not a good idea to spend too much time worrying about performance drops before they actually appear,
at least in a very lightweight, 2D case such as ours.&lt;/p&gt;

&lt;p&gt;So we will put the high-level decoupled game loop ideas on hold until it becomes necessary.
I originally wrote a spot more about this, but since we’re going with this naive loop for now,
it turned into unnecessary clutter.&lt;/p&gt;

&lt;p&gt;I’ve confined that section to #1.1, an appendix article.
If you’d like to read more about game loops, you can read it there, or consult the
more expert articles I have cited there.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/fgtutorial/2023/01/31/article1-1-gameloop-tangents.html&quot;&gt;» Optional: #1.1: Game loop tangents&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;see-you-next-time&quot;&gt;See you next time&lt;/h2&gt;

&lt;p&gt;Next time on &lt;b&gt;FIGHTING GAME P&lt;/b&gt;, we’ll start by implementing the input processing part of our game loop.
I’m partway through writing it right now and it’s certainly getting a little messy, so it promises to be a meaty one.
I might even have to break it up into multiple parts. So look forward to that.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/fgtutorial/2023/02/06/article2-inputs.html&quot;&gt;» Next: #2: Inputs&lt;/a&gt;&lt;/p&gt;</content><author><name>minogame</name></author><category term="fgtutorial" /><summary type="html">« Prev: #0.8: Rollback (Pre-reading) Good day. In this series of articles, I’ll be attempting to program a simple 2D fighting game using the Python game development library Pygame. Teaching the game loop design pattern is a common part of any game programming tutorial, so there’s already plenty of coverage on this topic on the internet, but we’ll go over it again, since it is quite important, and it sets up our next few topics quite nicely. I won’t be regurgitating the lessons of authors who’ve done it better, but I hope to add some useful commentary on how the game loop looks in the context of our fighting game.</summary></entry><entry><title type="html">Let’s make a fighting game #0.8: Rollback (Pre-reading)</title><link href="https://tuningdipsw.github.io/pages/tuningdipsw/fgtutorial/2023/01/27/article0-8-rollback-prep.html" rel="alternate" type="text/html" title="Let’s make a fighting game #0.8: Rollback (Pre-reading)" /><published>2023-01-27T21:08:30+00:00</published><updated>2023-01-27T21:08:30+00:00</updated><id>https://tuningdipsw.github.io/pages/tuningdipsw/fgtutorial/2023/01/27/article0-8-rollback-prep</id><content type="html" xml:base="https://tuningdipsw.github.io/pages/tuningdipsw/fgtutorial/2023/01/27/article0-8-rollback-prep.html">&lt;p&gt;&lt;a href=&quot;/fgtutorial/2023/01/09/article0-5-preparations.html&quot;&gt;« Prev: #0.5: Preparations&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Good day. In this series of articles, I’ll be attempting to program a simple 2D
fighting game using the Python game development library Pygame.&lt;/p&gt;

&lt;p&gt;“Rollback netcode”. “GGPO”. &lt;a href=&quot;https://twitter.com/jiyunaJP/status/1616477744556314625&quot;&gt;“Sajam”.&lt;/a&gt;
These are the words of the hour when it comes to good netplay, and fighting game players today
have raised their standards to the point where the inability to play the game
smoothly online is an instant deal-breaker for many.&lt;/p&gt;

&lt;p&gt;If you’re a small fighting game developer, you cannot afford to turn away
anyone who might be interested in your game, just because you think delay-based is good enough.&lt;/p&gt;

&lt;p&gt;(Frankly, even if you are a large one, you might not be able to afford to turn those people away either.)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/article0-8/yikes.jpg&quot; alt=&quot;Flag of the GBVS not-rollback announcement&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Battle standard of the GBVS not-rollback announcement&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Fortunately, implementing rollback netcode in your game is more than possible as a solo dev.&lt;br /&gt;
Let’s take a look at how.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/article0-8/nice.jpg&quot; alt=&quot;Flag of the GBVS rollback announcement&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Battle standard of the GBVS rollback announcement&lt;/em&gt;&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;reading&quot;&gt;Reading&lt;/h2&gt;

&lt;p&gt;Oh yeah. You’re going to need to do a bunch of reading.
It’s not enough for your understanding to be that rollback is “good” and “basically magic”,
because you’re going to have to implement it now.&lt;/p&gt;

&lt;p&gt;Fortunately, by making it this far into this series, you’ve already mired yourself in a great big swamp of reading,
so this will hardly be the worst of it.&lt;/p&gt;

&lt;p&gt;The thing to know about rollback netcode is that &lt;strong&gt;implementing it is quite achievable, as long as you&lt;/strong&gt;
&lt;strong&gt;plan your game and development around it from the start.&lt;/strong&gt;
Efforts to retrofit it into already-finished games built on delay-based netcode,
like &lt;em&gt;Mortal Kombat X&lt;/em&gt; and &lt;em&gt;Guilty Gear Xrd&lt;/em&gt; are far more daunting.
But you won’t need to worry about that.&lt;/p&gt;

&lt;aside&gt;
Well, okay, &lt;i&gt;I'll&lt;/i&gt; need to be able to answer the following questions.
&lt;br /&gt;
You might be able to just copy all of my code and scrape on by.
&lt;/aside&gt;

&lt;p&gt;You’ll need to be able to answer the following questions.&lt;/p&gt;

&lt;h3 id=&quot;--what-is-rollback-netcode-how-does-it-work&quot;&gt;- What is rollback netcode? How does it work?&lt;/h3&gt;

&lt;p&gt;To get our basic understanding of rollback netcode, we turn to the current best article on topic:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://words.infil.net/w02-netcode.html&quot;&gt;&lt;img src=&quot;/assets/images/article0-8/infil-article.png&quot; alt=&quot;Image of Infilament's netcode article&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://words.infil.net/w02-netcode.html&quot;&gt;Infilament’s article on rollback netcode.&lt;/a&gt;
(It’s also where I got the links to many of the following resources.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is a &lt;a href=&quot;https://www.youtube.com/watch?v=1RI5scXYhK0&quot;&gt;companion video&lt;/a&gt; talking through the points of the article,
so if you have trouble picking things up by reading, it might help you to sit through one of those first
so that you can hopefully understand things a bit better on your read-through.&lt;/p&gt;

&lt;p&gt;You still have to read the article though.&lt;/p&gt;

&lt;h3 id=&quot;--how-might-rollback-affect-my-game-design-decisions&quot;&gt;- How might rollback affect my game design decisions?&lt;/h3&gt;

&lt;p&gt;Consult &lt;a href=&quot;https://words.infil.net/w02-netcode-p6.html&quot;&gt;page 6, &lt;em&gt;“Seems like a good time to branch into how the designer can make smart design choices…“&lt;/em&gt;&lt;/a&gt;
of Infil’s netcode article for some discussion on how visually-discernable rollbacks (rollback artifacts) can be designed around.&lt;/p&gt;

&lt;p&gt;However, take note that even older games with very short move startups like GGXXACPR have benefited greatly
from the addition of rollback netcode. Fast games are still more than playable with rollbacking, so if
3-frame abare is part of your vision, you don’t have to compromise it because of rollback netcode.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;What if the airdash had 2 or 3 frames of stationary or slower moving startup with the same total duration? Your game plays almost identically but the visual artifacts of rollback are way reduced.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This note will be useful in either case.&lt;/p&gt;

&lt;h3 id=&quot;--what-do-i-need-to-do-in-order-to-support-rollback&quot;&gt;- What do &lt;em&gt;I&lt;/em&gt; need to do in order to support rollback?&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/CMZinac/status/1181878689270599680&quot;&gt;Zinac: Some of the systems affected by rollback’s requirements&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;Separate gameplay from presentation layer&lt;/li&gt;
    &lt;li&gt;Serializable game state&lt;/li&gt;
    &lt;li&gt;Particle simulation&lt;/li&gt;
    &lt;li&gt;Object lifetime&lt;/li&gt;
    &lt;li&gt;SFX&lt;/li&gt;
    &lt;li&gt;Animation system&lt;/li&gt;
    &lt;li&gt;UI&lt;/li&gt;
    &lt;li&gt;Desync detection&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/mauvecow/status/1182085152010203136&quot;&gt;Mauve: Requirements of the rollback-style network model&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Game must be re-entrant:
This means that your game has to be structured so that you can run an update,
&lt;em&gt;without&lt;/em&gt; affecting external things like video and sound.
Separating game logic and game visuals is not always viable, especially in modern 3D engines.&lt;/p&gt;

  &lt;p&gt;Again, if you haven’t built for it from the beginning, separating these two can be difficult at best.
It is not terribly hard in 2d games to just.. not draw things,
but 3d games often make heavy use of stateful information and it would need to be be fully separated.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A pair of short Twitter notes written by engineers experienced with implementing rollback,
bringing up some areas of concern when building around rollback.&lt;/p&gt;

&lt;p&gt;It’s our responsibility to uphold the following:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Keep the game fully deterministic. Avoid desyncs due to floating point numbers.&lt;/li&gt;
  &lt;li&gt;Implement functions for saving and loading game state.&lt;/li&gt;
  &lt;li&gt;Ensure update and rendering steps are separated in our game loop.&lt;/li&gt;
  &lt;li&gt;Ensure game runs well enough to run several update steps in the space of a single 1/60th of a second.&lt;/li&gt;
  &lt;li&gt;Handle audio properly during rollbacks to prevent sound effect clipping or duplication.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Particle simulation, object lifetime, and animation systems aren’t as problematic for us,
since we’re not working with an engine that’s inflexible about these things.&lt;/p&gt;

&lt;p&gt;I’m not sure how UI applies to our case.&lt;/p&gt;

&lt;p&gt;Desync detection might be covered by GGPO, but I am not sure.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/pond3r/ggpo/blob/master/doc/DeveloperGuide.md&quot;&gt;GGPO’s developer guide&lt;/a&gt;&lt;br /&gt;
GGPO’s official guidance on how to call the GGPO library.&lt;/p&gt;

&lt;aside&gt;
Python can work with C and C++ libraries using &lt;a href=&quot;https://realpython.com/python-bindings-overview/&quot;&gt;Python bindings&lt;/a&gt;,
a feature I am not familiar with right now but will speedily be looking at when I actually have to import the GGPO library.
&lt;/aside&gt;

&lt;p&gt;We will be making use of the open-source GGPO library to reduce some of the rollback systems we’ll need to implement.
With this known-working library available to us, it is largely not worth the time/effort of trying to roll our own.&lt;/p&gt;

&lt;h3 id=&quot;hints-on-implementation&quot;&gt;Hints on implementation&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://drive.google.com/file/d/1nRa3cRBQmKj0-SEyrT_1VNOkPOJWNhVI/view&quot;&gt;GGPO feature in GDMag&lt;/a&gt;&lt;br /&gt;
This article mostly retraces the explanations given by the Infil article, but it leaves some short tips for handling audio at the end.&lt;/li&gt;
&lt;/ul&gt;

&lt;aside&gt;
For those unfamiliar with navigating GitHub's web interface,
you can download the files by either clicking the green &quot;Code&quot; button -&amp;gt; &quot;Download ZIP&quot;,
or looking through the &quot;Releases&quot; section linked on the right sidebar (if the repository has any).
&lt;br /&gt;
&lt;br /&gt;
If you just want to read the code without running it, the GitHub editor may be better than the base webpage.
Access it by pressing &quot;.&quot; or &quot;&amp;gt;&quot; on the webpage.
&lt;br /&gt;
&lt;br /&gt;
When I tried to run it myself, I was unable to get two games to connect on the same machine,
so the game did not run.
Despite this, it's still a really useful reference.
&lt;/aside&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/rcmagic/DemoFighterWithNetcode&quot;&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/rcmagic/DemoFighterWithNetcode/master/screenshot.png&quot; width=&quot;270&quot; height=&quot;200&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/rcmagic/DemoFighterWithNetcode&quot;&gt;&lt;em&gt;DemoFighterWithNetcode&lt;/em&gt; on GitHub&lt;/a&gt;&lt;br /&gt;
A minimal LOVE2D fighting game demo with netcode by Zinac.&lt;br /&gt;
The code is open-source, for your perusal. It’s a useful reference for some of the various systems we might
implement in our fighting game, not just the netcode.&lt;br /&gt;
&lt;strong&gt;It has some useful debug options we might want to crib off of.&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&quot;https://www.twitch.tv/videos/493574286&quot;&gt;This video demo illustrating how desyncs cause one-sided rollbacks may be of interest.&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://blog.hypersect.com/rollback-networking-in-inversus/&quot;&gt;(Optional) Networking in &lt;em&gt;INVERSUS&lt;/em&gt;&lt;/a&gt;&lt;br /&gt;
Developer discusses their own take on implementing rollback.&lt;br /&gt;
Although &lt;em&gt;INVERSUS&lt;/em&gt; is not a traditional 2D fighter, I thought their notes on implementing gamestate backups
and audio segregation were useful.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=7jb0FOcImdg&quot;&gt;(Optional) NRS’ GDC talk on retrofitting rollback into MKX&lt;/a&gt;&lt;br /&gt;
A long, technical overview of NRS’ implementation, touching a lot on performance.&lt;br /&gt;
Has a lot of details particular to low-level languages (not Python) and heavy game engine stuff (not our sprite-based fighter),
so it is optional, but quite interesting all the same.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;additional-readings-for-modding-an-existing-game&quot;&gt;Additional readings for modding an existing game&lt;/h3&gt;

&lt;p&gt;These readings are mostly unnecessary for our task of implementing rollback into our new original game,
but if you are visiting this page to research how to retrofit rollback into an &lt;strong&gt;older&lt;/strong&gt; game,
these readings might be of use. They’re not exactly easy to find with web search, so I’ve taken the liberty of collecting them here.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/super-continent/game-reversing-resources&quot;&gt;&lt;strong&gt;Game Hacking Resources&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Useful primer and resource dump on getting into reverse engineering games, which you will need to do when retrofitting.&lt;br /&gt;
(Unless your work is officially sanctioned by the developers, you will not have access to the source code.)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Mauve’s writings on writing RollCaster from ~2010-2012&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://web.archive.org/web/20180610000516/http://mizuumi.net/2010/10/24/caster-an-unofficial-netplay-client/&quot;&gt;(1) Caster, an unofficial netplay client&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://web.archive.org/web/20180429085318/http://mizuumi.net/2010/11/08/caster-how-its-done/&quot;&gt;(2) Caster - How it’s done&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://web.archive.org/web/20180217125309/http://mizuumi.net/2010/11/27/caster-the-making-of-rollcaster/&quot;&gt;(3) Caster - The Making of RollCaster&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://web.archive.org/web/20170612204733/http://mauve.mizuumi.net/2012/02/05/investigating-rollcasters-desyncs/&quot;&gt;(4) Investigating RollCaster’s Desyncs&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://web.archive.org/web/20180221091132/http://mauve.mizuumi.net/2012/02/22/investigating-rollcasters-timing-issues/&quot;&gt;(5) Investigating RollCaster’s timing issues&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://web.archive.org/web/20180728043303/http://mauve.mizuumi.net/2012/03/08/how-i-didnt-clip-the-sound-effects/&quot;&gt;(6) How I didn’t clip the sound effects.&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://web.archive.org/web/20180824004523/http://mauve.mizuumi.net/2012/07/05/understanding-fighting-game-networking&quot;&gt;(7) Understanding Fighting Game Networking&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(6) is another source on how to handle audio during rollbacks.&lt;/p&gt;

&lt;p&gt;Although (7) mostly echoes the rollback explanations from articles above, there are a few important passages worth noting.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;You can send multiple frames worth of input data for each frame, so that when one frame gets lost you don’t need to wait for a full resend cycle to complete in order to continue with the game. Input data’s pretty cheap so it doesn’t cost much to include 5-10 frames worth of data in a packet, so might as well include it. This is something that you should pretty much always do.&lt;/p&gt;

  &lt;p&gt;[…]&lt;/p&gt;

  &lt;p&gt;If one game is running slower than another, dropping a frame here or there, it &lt;strong&gt;cannot&lt;/strong&gt; be treated the same as if it were a packet loss. This is because you lose that bonus extra buffer of delay you added to compensate for it, and get effectively nothing of value out of it. Obviously, this isn’t desirable.&lt;/p&gt;

  &lt;p&gt;This leads to the most important rule of this sort of network code: The goal is to maintain complete synchronization with the other system. This &lt;strong&gt;includes&lt;/strong&gt; performance issues. If one has a drop, this drop must be reflected in the other as well. Always. Anything else will lead to a desynchronization of the intended behavior.&lt;/p&gt;

  &lt;p&gt;[…]&lt;/p&gt;

  &lt;p&gt;And if you’re wondering, the rule from above regarding keeping synchronization with the other system’s performance must be upheld. If you detect that the other computer is running slowly and has dropped a frame, then you must also wait a frame to keep synchronization, even in a rollback setup. If you don’t do this the two computers will slowly drift out of timing and nobody wants that.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;at-last-for-real-this-time&quot;&gt;At Last (For Real This Time)&lt;/h2&gt;

&lt;p&gt;Good. You now know have an idea of what you’ll need to do to support rollback as we begin to code our engine.&lt;br /&gt;
If you don’t, you at least have a list of reading materials you can come back to when you get stuck on that.&lt;/p&gt;

&lt;p&gt;With this under our belt, we’re ready to start coding.&lt;/p&gt;

&lt;p&gt;At last.&lt;/p&gt;

&lt;p&gt;For real this time.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;But not in this article.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/article0-8/monitor-away.png&quot; alt=&quot;Iku throws a monitor out of a window&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/fgtutorial/2023/01/30/article1-gameloop.html&quot;&gt;» Next: #1: Introducing our game loop&lt;/a&gt;&lt;/p&gt;</content><author><name>minogame</name></author><category term="fgtutorial" /><summary type="html">« Prev: #0.5: Preparations Good day. In this series of articles, I’ll be attempting to program a simple 2D fighting game using the Python game development library Pygame. “Rollback netcode”. “GGPO”. “Sajam”. These are the words of the hour when it comes to good netplay, and fighting game players today have raised their standards to the point where the inability to play the game smoothly online is an instant deal-breaker for many. If you’re a small fighting game developer, you cannot afford to turn away anyone who might be interested in your game, just because you think delay-based is good enough. (Frankly, even if you are a large one, you might not be able to afford to turn those people away either.) Battle standard of the GBVS not-rollback announcement Fortunately, implementing rollback netcode in your game is more than possible as a solo dev. Let’s take a look at how. Battle standard of the GBVS rollback announcement</summary></entry><entry><title type="html">Let’s make a fighting game #0.5: Preparations</title><link href="https://tuningdipsw.github.io/pages/tuningdipsw/fgtutorial/2023/01/09/article0-5-preparations.html" rel="alternate" type="text/html" title="Let’s make a fighting game #0.5: Preparations" /><published>2023-01-09T21:08:30+00:00</published><updated>2023-01-09T21:08:30+00:00</updated><id>https://tuningdipsw.github.io/pages/tuningdipsw/fgtutorial/2023/01/09/article0-5-preparations</id><content type="html" xml:base="https://tuningdipsw.github.io/pages/tuningdipsw/fgtutorial/2023/01/09/article0-5-preparations.html">&lt;p&gt;&lt;a href=&quot;/fgtutorial/2023/01/06/article0-heart.html&quot;&gt;« Prev: #0: The heart&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Good day. In this series of articles, I’ll be attempting to program a simple 2D fighting game using
the Python game development library Pygame.&lt;/p&gt;

&lt;p&gt;Even after sitting through the previous article, we still have a bit of preparation to complete
before we can get started. Let’s get our prerequisites sorted out.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;install-python&quot;&gt;Install Python&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.python.org/downloads/&quot;&gt;https://www.python.org/downloads/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(2023/2/13)
The original Pygame library was only compatible with Python 3.10, forcing users
to download a less-recent version of Python,
but the &lt;a href=&quot;https://github.com/pygame-community/pygame-ce&quot;&gt;Pygame community edition library&lt;/a&gt;
that has taken its place is compatible with Python 3.11.&lt;/p&gt;

&lt;p&gt;Confirm the installation by running&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python3 --version
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;in a terminal.&lt;/p&gt;

&lt;h3 id=&quot;aside-a-first-roadblock-strategies-for-bugs&quot;&gt;Aside: A first roadblock (Strategies for bugs)&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;'python' is not recognized as an internal or external command,
operable program or batch file.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You might run into your first error here. Don’t panic, errors are going to happen a lot.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The instructions you’re following may be out-of-date, or even outright wrong.&lt;/li&gt;
  &lt;li&gt;You may have simply mistyped something; maybe you read a 0 (zero) as an O (capital o),
or your Mac autocorrected a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--&lt;/code&gt; (two hyphens, often used for command-line flag) into a – (em dash).&lt;/li&gt;
  &lt;li&gt;Maybe you just did something wrong. If it won’t take too long, run it again from the beginning
just to be sure. &lt;em&gt;(Do a sanity check)&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Sometimes your computer is just very strange and nothing anyone has suggested works.
I’m very sorry if you have to go through one of these.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Whatever the case, here’s some of the basic steps you should try to solve an error:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Try to reproduce the error.
    &lt;ul&gt;
      &lt;li&gt;Learning the possible conditions that may cause it might help you understand why it happens.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Paste the error text into Google.
    &lt;ul&gt;
      &lt;li&gt;The exact error text will often have bits specific to your program or particular run that
obviously won’t appear in others’ questions, so you will likely need to pare down the text a bit.&lt;/li&gt;
      &lt;li&gt;Sometimes the error readout/stack trace will have multiple errors in it. More often than not, you
only want the one closest to the bottom since it’s the one causing the rest of errors, but give the others a skim.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/b0rk/status/1570463473011920897&quot;&gt;Stop and read the error again, more carefully this time.&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;After giving the problem an honest try, ask others for help on StackOverflow or a relevant Discord.
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Rubber_duck_debugging&quot;&gt;Just the act of trying to cleanly articulate what’s wrong may give you insight.&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;aside&gt;
&lt;i&gt;&quot;Why are you using Windows?&quot;&lt;/i&gt;
&lt;br /&gt;
&lt;br /&gt;
It's true:
The fickly-updated, too-user-&quot;friendly&quot; Windows is the root of many, many compatibility issues in programming,
so most programmers recommend working on Mac or Linux instead for pure coding.
&lt;br /&gt;
&lt;br /&gt;
However, the inconvenience of booting up Linux on an emulator/another disc on my cheeks laptop
completely torpedoes my motivation to write articles or code, so I've stubbornly
arranged my workflow around working past Windows' idiosyncrasies.
&lt;br /&gt;
&lt;br /&gt;
It is in no way optimal, but it has proven manageable thus far.
I may switch to Linux someday, but for the time being, this is a compromise I have made to deal with my own mental blocks.
&lt;/aside&gt;

&lt;p&gt;Advice for this error on Windows, if you can’t figure it out:&lt;/p&gt;
&lt;p class=&quot;spoiler&quot;&gt;
On Windows, this is usually caused by the location of the newly-installed Python executable being absent from the PATH
environment variable. Try searching for &quot;how to add python path environment variable windows&quot;.
You may also need to restart your computer for the environment variable changes to take effect.
&lt;/p&gt;

&lt;h3 id=&quot;additional-reading&quot;&gt;Additional reading&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/help/how-to-ask&quot;&gt;StackOverflow’s How to Ask&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.chiark.greenend.org.uk/~sgtatham/bugs.html&quot;&gt;How to Report Bugs Effectively&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://catb.org/~esr/faqs/smart-questions.html&quot;&gt;How to Ask Questions the Smart Way&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The latter two are a bit lengthy and harsh to the reader, but if you’re willing to swallow your pride,
all three of these articles teach you best practices for how to ask for help in a way that will improve your
chances of getting a good answer.&lt;/p&gt;

&lt;p&gt;I recommend giving them a read when you have a bit of time.&lt;/p&gt;

&lt;h2 id=&quot;2023212-new-install-pygame-community-edition&quot;&gt;(2023/2/12: New) Install Pygame Community Edition&lt;/h2&gt;

&lt;p&gt;Due to issues with the original Pygame project being able to update to Python 3.11 compatibility,
a new fork of the Pygame project, &lt;a href=&quot;https://github.com/pygame-community/pygame-ce&quot;&gt;pygame-community&lt;/a&gt;,
has been adopted to support Python 3.11 and more frequent updates.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/pygame-community/pygame-ce#installation&quot;&gt;Installation is pretty straightforward:&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip install pygame-ce
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can uninstall the original pygame if you had it installed; you should not need to adjust any other files.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip uninstall pygame
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Again, as a sanity check, try getting &lt;a href=&quot;https://pyga.me/docs/#quick-start&quot;&gt;a quick program&lt;/a&gt; to work.
You might need to install an IDE first, though:&lt;/p&gt;

&lt;h2 id=&quot;install-and-configure-your-ide-of-choice&quot;&gt;Install and configure your IDE of choice&lt;/h2&gt;

&lt;p&gt;As mentioned in #0, don’t settle for accepting pain points, try to eliminate or reduce them
however you can. An IDE (Integrated Development Environment) should be the program you write most, if not
all of your code in, as they provide much-needed quality-of-life features (eg. text autocompletion,
bracket highlighting, test runners plugins, Git integration) for development. I recommend
&lt;a href=&quot;https://code.visualstudio.com/download&quot;&gt;Visual Studio Code&lt;/a&gt;, an excellent, free pick with robust
support from its developers and plugin writers.&lt;/p&gt;

&lt;p&gt;Another option I found for Python is Spyder IDE + Anaconda. I haven’t tried this myself, but it was
recommended to me by &lt;a href=&quot;https://www.patternsgameprog.com/discover-python-and-patterns-1&quot;&gt;another Pygame tutorial&lt;/a&gt;
I found very helpful.&lt;/p&gt;

&lt;aside&gt;
Guides for setting up Python linting and type checking on VSCode:
&lt;a href=&quot;https://code.visualstudio.com/docs/python/linting&quot;&gt;(1)&lt;/a&gt;
&lt;a href=&quot;https://www.emmanuelgautier.com/blog/enable-vscode-python-type-checking&quot;&gt;(2)&lt;/a&gt;
&lt;/aside&gt;

&lt;p&gt;Some optional settings or plugins you might like to set up at this point include
a &lt;a href=&quot;https://realpython.com/python-code-quality/#linters&quot;&gt;linter&lt;/a&gt;
or a &lt;a href=&quot;https://realpython.com/python-type-checking/&quot;&gt;type checker&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;optional-set-up-version-control-software-git&quot;&gt;(Optional) Set up Version Control Software (Git)&lt;/h2&gt;

&lt;p&gt;You don’t need to set up VCS to write code, but having it set up will help you keep track of
your project changes. There are a number of VCS options out there, but Git is the one I’m familiar with.&lt;/p&gt;

&lt;h3 id=&quot;motivations-for-using-vcs&quot;&gt;Motivations for using VCS&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;You’d like to segment your changes into nice, discrete chunks instead of letting everything
blend together into a continuous stream of changes. &lt;em&gt;(git commit)&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;You’d like to be able to see which parts of your program you’ve made changes to since your last commit.
&lt;em&gt;(git diff, also displayed passively in IDEs with Git integration)&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;You’d like the ability to view, and in a worst-case scenario, revert back to, previous versions
of your codebase. &lt;em&gt;(git revert)&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Similarly, being able to easily and safely apply and unapply a set of temporary changes to
see what the difference looks like. &lt;em&gt;(git stash)&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;You’d like to be able to fluidly upload and download a record of your changes to/from the web,
in the off-chance your filesystem explodes. &lt;em&gt;(remote repository like GitHub)&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I would consider having the ability to do all of these an integral part of development QOL.
Better to have it and not need it than the other way around, after all.&lt;/p&gt;

&lt;aside&gt;
* There is a GUI (Graphical User Interface) version of Git available for users who don't wish to
learn the command line commands. I find it much faster to use the command line instead, but it is an option
available to you to help you learn the basic workflow.
&lt;/aside&gt;

&lt;p&gt;Git can be intimidating to learn
due to the combination of having a very long command list available and being invoked through the
command line*, but these are things that can be overcome. Take a bit of time, learn something new,
and you’ll have a handy new tool in your toolbox.&lt;/p&gt;

&lt;p&gt;Here is a summary of the basic Git workflow most of your Git usage will resemble:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# In the root of your project folder, generate a Git repository&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Only need to do this once&lt;/span&gt;
git init

&lt;span class=&quot;c&quot;&gt;# Get a look at the list of changed/uncommitted files&lt;/span&gt;
git status

&lt;span class=&quot;c&quot;&gt;# Add a single file to the list of files to be committed&lt;/span&gt;
git add filename.txt

&lt;span class=&quot;c&quot;&gt;# OR Use a pattern and the wildcard * to add all files starting with &quot;filename.&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# to the list of files to be committed&lt;/span&gt;
git add filename.&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; 

&lt;span class=&quot;c&quot;&gt;# OR What the heck, add all files&lt;/span&gt;
git add &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; 

&lt;span class=&quot;c&quot;&gt;# Look again, check which files have been staged&lt;/span&gt;
git status 

&lt;span class=&quot;c&quot;&gt;# Ok, not that file, put that one back&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Unstage this file from the list of files to be included in the next commit&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Maybe write a .gitignore file to automatically prevent this one from ever getting added&lt;/span&gt;
git restore &lt;span class=&quot;nt&quot;&gt;--staged&lt;/span&gt; passwords.txt

&lt;span class=&quot;c&quot;&gt;# Tie it all up in a bow with a message&lt;/span&gt;
git commit &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Descriptive message summarizing this chunk of changes&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# View the newly-updated commit log for your sanity&lt;/span&gt;
git log
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Some other useful commands include:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Split into a new development branch (eg. for experimental feature&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# or a new version release)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# For your personal work, you might not need this, but it is an option&lt;/span&gt;
git branch
git branch list
git checkout

&lt;span class=&quot;c&quot;&gt;# Revert to last commit, saving all uncommitted changes away&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# on an invisible stack saved by Git&lt;/span&gt;
git stash

&lt;span class=&quot;c&quot;&gt;# Put the last-stashed set of changes back into play, popping it off&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# the stack of set-of-changes stored by Git&lt;/span&gt;
git stash pop

&lt;span class=&quot;c&quot;&gt;# Quickly undo all uncommitted changes to a file&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Overlaps with the command to unstage a file from the list of files to be included in a commit&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# just with no --staged flag, try very hard to avoid using this accidentally&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# ! This can erase all your changes even if saved, and can't be undone through Git, be VERY careful&lt;/span&gt;
git restore filename.txt

&lt;span class=&quot;c&quot;&gt;# Read more about this and soft/hard reverts at your own leisure&lt;/span&gt;
git revert
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;additional-reading-1&quot;&gt;Additional reading&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.github.com/en/get-started/using-git/about-git&quot;&gt;https://docs.github.com/en/get-started/using-git/about-git&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.github.com/en/get-started/quickstart/set-up-git&quot;&gt;https://docs.github.com/en/get-started/quickstart/set-up-git&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://training.github.com/downloads/github-git-cheat-sheet/&quot;&gt;https://training.github.com/downloads/github-git-cheat-sheet/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;at-last&quot;&gt;At Last&lt;/h2&gt;

&lt;p&gt;Excellent. The necessary software has been installed, and your dev tools are all in place.
You’re ready to write some code.&lt;/p&gt;

&lt;p&gt;Let’s get started.&lt;/p&gt;

&lt;p&gt;…Next time.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/article0-5/pewgf.png&quot; alt=&quot;1koma of Iku Nagae punching her monitor&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/fgtutorial/2023/01/27/article0-8-rollback-prep.html&quot;&gt;» Next: #0.8: Rollback (pre-reading)&lt;/a&gt;&lt;/p&gt;</content><author><name>minogame</name></author><category term="fgtutorial" /><summary type="html">« Prev: #0: The heart Good day. In this series of articles, I’ll be attempting to program a simple 2D fighting game using the Python game development library Pygame. Even after sitting through the previous article, we still have a bit of preparation to complete before we can get started. Let’s get our prerequisites sorted out.</summary></entry><entry><title type="html">Let’s make a fighting game #0: The heart</title><link href="https://tuningdipsw.github.io/pages/tuningdipsw/fgtutorial/2023/01/06/article0-heart.html" rel="alternate" type="text/html" title="Let’s make a fighting game #0: The heart" /><published>2023-01-06T21:08:30+00:00</published><updated>2023-01-06T21:08:30+00:00</updated><id>https://tuningdipsw.github.io/pages/tuningdipsw/fgtutorial/2023/01/06/article0-heart</id><content type="html" xml:base="https://tuningdipsw.github.io/pages/tuningdipsw/fgtutorial/2023/01/06/article0-heart.html">&lt;p&gt;Good day. In this series of articles, I’ll be attempting to program a simple 2D
fighting game using the Python game development library Pygame, documenting the
process as I do so, working through the problem, the logic, and the code. There
might be some arbitrary flavour tangents included as well, as I am not being
paid to omit them.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;…And here’s one coming up fast…!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(Note: This is a long one. Feel free to skip to #0.5 or a later segment using
the Table of Contents above.)&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;why-are-you-here&quot;&gt;Why are you here?&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/article0/yes-you.png&quot; alt=&quot;1koma of a screen pointing at Iku Nagae&quot; /&gt;&lt;/p&gt;

&lt;aside&gt;
Keep it down with that &quot;&lt;i&gt;Smash isn't a real fighting game&lt;/i&gt;&quot; talk you know
what I'm talking about
&lt;/aside&gt;

&lt;p&gt;The fighting game genre boasts a storied legacy that few others can match, with
its &lt;em&gt;Street Fighter&lt;/em&gt;s and its &lt;em&gt;Tekken&lt;/em&gt;s, its &lt;em&gt;King of Fighters&lt;/em&gt; and its &lt;em&gt;Smash Bros&lt;/em&gt;.
And it doesn’t take long for onlookers to understand what a fighting game is about;
the thrill of combat between two foes standing face-to-face,
the back-and-forth drama of two rivals going blow-for-blow can pull them in without
explanation. It’s famous, simple, and it’s been around for quite a long time.
Between those three factors, I think it is a contender for the most recognizable
genre there is.&lt;/p&gt;

&lt;p&gt;And yet, despite the purchase the fighting game has in our cultural consciousness,
the fighting game genre has a reputation for being one of the hardest to get into,
and in recent years, it seems like one that only a handful of big companies dare
attempt.&lt;/p&gt;

&lt;p&gt;Yes, recent fighting games have had their successes, as of late.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;Guilty Gear Strive&lt;/em&gt; - &lt;a href=&quot;https://www.eventhubs.com/news/2022/aug/10/guilty-gear-1-million/&quot;&gt;1 million copies sold.&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Tekken 7&lt;/em&gt; -&lt;a href=&quot;https://www.gematsu.com/2022/12/tekken-7-sales-top-10-million-tekken-series-sales-top-54-million&quot;&gt;10 million copies.&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Smash Ultimate&lt;/em&gt; - &lt;a href=&quot;https://www.eventhubs.com/news/2022/may/11/ssbu-sold-28-million-units/&quot;&gt;28 million copies.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However, this is but a sample of the biggest games, made by the most skilled companies…
and only of sales, not of playerbase.&lt;/p&gt;

&lt;p&gt;I don’t want to bring out the Steam Charts(tm), but
you don’t have to look far to see how players flock and have flocked to other genres, like the FPS,
&lt;a href=&quot;https://en.wikipedia.org/wiki/The_Sims_Social#Reception&quot;&gt;the Facebook game&lt;/a&gt;,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Multiplayer_online_battle_arena&quot;&gt;the MOBA&lt;/a&gt;,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Gacha_game&quot;&gt;the gacha game&lt;/a&gt;,
&lt;a href=&quot;https://en.wikipedia.org/wiki/PUBG:_Battlegrounds&quot;&gt;the battle royale&lt;/a&gt;,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Dota_Auto_Chess#Reception&quot;&gt;the auto-battler&lt;/a&gt;,
&lt;a href=&quot;https://www.youtube.com/watch?v=poGpNrQn6vc&quot;&gt;the Vampire Survivors…-like&lt;/a&gt;,
whatever breakout hit you see creating its own genre of derivatives and imitators…&lt;/p&gt;

&lt;p&gt;and you might wonder to yourself, why make a fighting game?&lt;/p&gt;

&lt;p&gt;Who is going to play my game?&lt;/p&gt;

&lt;p&gt;Sometimes I wonder how fighting games are doing. Perhaps you wonder sometimes as well.&lt;/p&gt;

&lt;p&gt;The golden age raised a generation of fighting game players we still tell stories about today.
The arcade generation, the four Japanese gods, those &lt;em&gt;Umehara Fighting Gamers…&lt;/em&gt;&lt;br /&gt;
The revival era sparked by &lt;em&gt;SF4&lt;/em&gt;, too, spawned its own renaissance of competition, where it seemed like
&lt;em&gt;SF4&lt;/em&gt; was the world.&lt;br /&gt;
But those days are behind us, of course.&lt;/p&gt;

&lt;p&gt;Now, today, &lt;em&gt;Street Fighter 6&lt;/em&gt;, &lt;em&gt;Tekken 8&lt;/em&gt;, and &lt;em&gt;Project L&lt;/em&gt; loom on the horizon with great promises and
expectations for each – New mechanics! New characters! Smoother netcode! New &lt;em&gt;old&lt;/em&gt; characters! Better
features, a better package! Photorealistic images of Ryu’s sweat glands! A fresh new intake of players!
– with the hopes that finally, with this title, the golden age might return again.&lt;/p&gt;

&lt;p&gt;…Perhaps.&lt;/p&gt;

&lt;p&gt;As multiplayer games, I think fighting games have it rough.&lt;/p&gt;

&lt;p&gt;We core fighting gamers
go into them looking only for their multiplayer, ignoring or downplaying the package, the single-player elements,
chasing the memory of that fresh new competitive scene we’ve been longing for, just like the one
that made us fall in love with fighting games…&lt;/p&gt;

&lt;p&gt;Soon we’re crying for balance, crying for content, new characters, old characters, calling for the heads of
the developers… Where’s Mileena, Ed Boon?? Daisuke’s vision, am I right?! When’s rollback, Kamone?!?!
Oh thank you so very much, Mori…!!!!! Ha… ha ha hahahahahahahaha…!!!&lt;/p&gt;

&lt;p&gt;But the modern fighting game had to evolve, has to patch, has to bow to the crashing waves,
because they live and they die by the love of their playerbase……&lt;/p&gt;

&lt;p&gt;The fickle dissatisfaction that can drive a thousand bitchmad Twitter users to call a game dead
lives in the same heart as the love that lets fifty immovable Discord users continue to boot up and play
sets with one another, peer to peer, long past the point of end-of-service,
longer than any developer could realistically dream that their game could be played.&lt;/p&gt;

&lt;p&gt;Atop the pile of a thousand defunct live service games (some middling fighters among them), lies that
enviable summit which the most immortal of fighting games have achieved -&lt;br /&gt;
those that have inspired people to play them into eternity.&lt;/p&gt;

&lt;p&gt;Look at &lt;a href=&quot;https://www.youtube.com/watch?v=Vh28VMbjkPk&quot;&gt;&lt;em&gt;Eternal Fighter Zero&lt;/em&gt;’s Latin American community&lt;/a&gt;,
look at &lt;a href=&quot;https://www.youtube.com/watch?v=2yT30H8vK2Q&quot;&gt;the arcade goer who plays &lt;em&gt;Street Fighter II Turbo&lt;/em&gt; every day, for thirty years&lt;/a&gt; –
and I can’t help but think that the core fighting game player has something in them in common
with a speedrunner.&lt;/p&gt;

&lt;p&gt;The pursuit of perfection that drives a player to endlessly hone themselves, the dream of someday becoming
unbeatable through one’s depth of experience and intimate mastery; that, at least to me, is the romance
of the fighting game genre – and it abrases with the idea of an eternal revolving door of new fighting games.&lt;/p&gt;

&lt;p&gt;Every new fighting game that comes out today must compete, in at least some way, with the decades of
legacy that comes before it.&lt;/p&gt;

&lt;aside&gt;
The &lt;i&gt;Will it Kill?&lt;/i&gt; clip is pretty good though. Actually, there were at least two at the time of writing,
I misremembered.
&lt;a href=&quot;https://youtu.be/Twq279Rg8pk?t=2707&quot;&gt;(1)&lt;/a&gt;,
&lt;a href=&quot;https://youtu.be/iXd-HmrcbZc?t=2065&quot;&gt;(2)&lt;/a&gt;
&lt;/aside&gt;

&lt;p&gt;Your game, if you choose to go through with making it, must do its utmost to make the world care about
it for even a moment. It’s fighting against &lt;em&gt;Melty Blood Actress Again Current Code&lt;/em&gt;, against
&lt;em&gt;Street Fighter 6&lt;/em&gt;, against &lt;del&gt;Yomi&lt;/del&gt;…&lt;strong&gt;Y&lt;/strong&gt;our &lt;strong&gt;O&lt;/strong&gt;nly &lt;strong&gt;M&lt;/strong&gt;ove &lt;strong&gt;I&lt;/strong&gt;s Hustle; it’s fighting against
&lt;em&gt;Phantom Breaker Omnia&lt;/em&gt;, although this is a game that to my knowledge has little more legacy than its
&lt;a href=&quot;https://www.youtube.com/watch?v=MgQAPDAq3Go&quot;&gt;exceptionally camp release date trailer&lt;/a&gt;, one
&lt;em&gt;Vortex Gallery&lt;/em&gt; tournament, and a &lt;em&gt;Will it Kill?&lt;/em&gt; clip, so this is not an exceptionally high bar to clear.&lt;/p&gt;

&lt;aside&gt;
...until perhaps one day, they let go of even that, and retire from competition, retire from
fighting games...
&lt;a href=&quot;https://twitter.com/honzogonzo/status/1422224258717999105&quot;&gt;to the great retirement home in the sky&lt;/a&gt;
&lt;br /&gt;
&lt;br /&gt;
...I don't think there's any shame in that. However tragic it may be on a distant level, if it's something that
you've grown out of, if moving on ultimately brings your current self closer to happiness, I cannot
help but celebrate it with you.
&lt;br /&gt;
&lt;br /&gt;
Also your hands might explode if you play Naoto for too long
&lt;/aside&gt;

&lt;p&gt;But even supposing that the core fighting game player gives it an honest try, and perhaps even enjoys
its &lt;a href=&quot;https://www.youtube.com/watch?v=Y-b6SbGQSoI&quot;&gt;discovery honeymoon&lt;/a&gt; –
In the end, those oldheads, who once were young, who’ve already found the fighting game &lt;em&gt;they&lt;/em&gt; love,
will surely seep back to the embrace of their old lover…&lt;/p&gt;

&lt;p&gt;I don’t wish for you to take these musings as doomsaying, that I believe fighting games are dying.&lt;br /&gt;
I don’t believe that fighting games will die.&lt;br /&gt;
There’s so much enthusiasm and passion for them today, in this silver age of rollback netcode and
(comparatively) positive discourses.&lt;br /&gt;
I think there’ll always be a faction of &lt;em&gt;&lt;a href=&quot;https://youtu.be/C3q5nSqGXr4?t=92&quot;&gt;goinmul&lt;/a&gt;&lt;/em&gt; players who’ll keep
playing their games for as long as they can. I expect great things from the upcoming generation
of AAA fighting games.&lt;br /&gt;
But, I’m not convinced that they can sweep the world again like contemporary or future genres have, or will.&lt;br /&gt;
Even though they’re such beautiful games.&lt;/p&gt;

&lt;p&gt;When I look around the fighting game space, there’s a lot of things that make me uneasy about its future.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;aside&gt;
&lt;a href=&quot;https://www.youtube.com/watch?v=2ovCHgAPXSc&quot;&gt;&quot;This is the hardest time to be a fighting game player&quot;&lt;/a&gt;,
&lt;a href=&quot;https://twitter.com/2dJazz/status/1357086600316948480&quot;&gt;(2)&lt;/a&gt;,
&lt;a href=&quot;https://twitter.com/2dJazz/status/1571867774573768706&quot;&gt;(3)&lt;/a&gt;
&lt;/aside&gt;

&lt;p&gt;Netplay can be alienating, yet offline play may be uncertain.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;aside&gt;
&lt;a href=&quot;https://twitter.com/ysemulti/status/1273184356186669056&quot;&gt;(1)&lt;/a&gt;,
&lt;a href=&quot;https://twitter.com/fubarduck/status/1579758025442996224&quot;&gt;(2)&lt;/a&gt;,
&lt;a href=&quot;https://www.youtube.com/playlist?list=PLExsOrWTHnDYK74QrMSsMBRVTuVy6I9zm&quot;&gt;(3)&lt;/a&gt;
&lt;/aside&gt;

&lt;p&gt;Arcades are already on their way out,&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;aside&gt;
&lt;a href=&quot;https://www.youtube.com/watch?v=k_fm2hCLjVs&quot;&gt;&quot;The Smash World Tour Situation is a Big Deal Even for the FGC&quot;&lt;/a&gt;,
&lt;a href=&quot;https://www.youtube.com/watch?v=dcmhYEZ_SUY&quot;&gt;&quot;The Bigger Culprit in the Smash World Tour Shutdown Hasn't Got Enough Smoke&quot;&lt;/a&gt;
&lt;/aside&gt;

&lt;p&gt;the professional scene survives in no small part on the good graces of corporate eatsports interests,&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;aside&gt;
&lt;a href=&quot;https://twitter.com/nycfurby/status/1587288086177845250&quot;&gt;(1)&lt;/a&gt;,
&lt;a href=&quot;https://twitter.com/KITVandy/status/1551642913263812608&quot;&gt;(2)&lt;/a&gt;
&lt;/aside&gt;

&lt;p&gt;and the tremendous effort required to run the events that carry our scene cannot be taken for granted.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Yes. I feel a little uneasy about the future of fighting games.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;But you don’t care about that.
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;You mustn’t care about that.
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;If you’re here reading this, then you must already want to make a fighting game. You may not be aiming
to make the next &lt;em&gt;Street Fighter&lt;/em&gt;, or a title so successful it earns you ten billion dollars, or a game
so excellently balanced that will-be oldheads point to it in internet arguments about how amazing/crappy
the actual next &lt;em&gt;Street Fighter&lt;/em&gt; is – but surely, on some level, you must have a love for the game.
You must have a love for watching two characters speak to one another, through the rule of beasts, and
that precious spark within you, wishing to make that happen yourself.&lt;/p&gt;

&lt;p&gt;I cannot promise that making a fighting game will make you rich, or even that it’s a sustainable way
to support yourself.&lt;br /&gt;
It is unreasonable to expect that your self-made fighting game will be able to compete with the
titans of the genre.&lt;/p&gt;

&lt;p&gt;Nor can I even say that making a fighting game is a good idea.&lt;br /&gt;
I write this text only because I am less sane than anyone whose judgement might be better.&lt;/p&gt;

&lt;p&gt;But if you have a character you want to see expressed through the language of a game –&lt;br /&gt;
&lt;a href=&quot;https://www.gematsu.com/2014/11/blazblue-dengeki-bunko-fc-devs-want-make-idolmaster-love-live-fighting-games&quot;&gt;a character from a series you love,&lt;/a&gt;
&lt;a href=&quot;https://dic.pixiv.net/a/%E3%81%86%E3%81%A1%E3%81%AE%E5%AD%90&quot;&gt;an original character of your own that you can call a child,&lt;/a&gt;&lt;br /&gt;
if you have a love for that character,
if you have love,
then make this game, and pray that that feeling can transmit to someone else out there, out in the world.&lt;/p&gt;

&lt;p&gt;If there’s a part of you that screams when you witness an unbelievable combo on &lt;em&gt;Will it Kill?&lt;/em&gt;, a part
of you that could love a kusoge, that can feel the electricity running between the hands on your controller
and the character on your screen, that wishes to see a game achieve the miracle of existence,
against all odds…&lt;/p&gt;

&lt;p&gt;If you have a love for the game, like I do,&lt;br /&gt;
then let’s make a game.&lt;/p&gt;

&lt;p&gt;Let’s make a beautiful game.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;awesome-those-words-you-just-wrote-were-truly-gripping-now-onto-the-tutorial&quot;&gt;AWESOME, THOSE WORDS YOU JUST WROTE WERE TRULY GRIPPING. NOW ONTO THE TUTORIAL&lt;/h2&gt;

&lt;p&gt;Firstly, I must say this.&lt;br /&gt;
I have little to no fighting game player credentials. Frankly, I am quite poor at the games I play.&lt;br /&gt;
Nor do I have much in the way of programming credentials. I still count myself among the beginning ranks of the profession.&lt;br /&gt;
Is this fraudulent? Disappointing? Yes. Perhaps.&lt;/p&gt;

&lt;aside&gt;
* See &lt;a href=&quot;https://youtu.be/egcPOGDIk6Y?t=277&quot;&gt;&quot;Sajam Discusses Fighting Game Content: We Need More of It&quot;&lt;/a&gt;.
&lt;br /&gt;
&lt;br /&gt;
** These tend to emerge naturally as a pastime of debate between those experts. Tis the intellectual
pleasure of showing off one's expertise to the world, married with the urge to correct some other moron
(smooches. Smooches. We're all friends. All in good fun) who hath made an error, or even just an omission
of technical detail, that wills these threads into existence.
&lt;br /&gt;
&lt;br /&gt;
&lt;i&gt;&quot;As the strongman exults in his physical
ability[...], so glories the analyst in that moral activity which disentangles. He derives pleasure from
even the most trivial occupations bringing his talents into play.&quot; &lt;/i&gt;
 - Edgar Allen Poe, &lt;i&gt;The Murders in the Rue Morgue&lt;/i&gt;.
&lt;br /&gt;
&lt;br /&gt;
&quot;Infodumping is pretty fun.&quot; I only know this
quotation because it was used in &lt;i&gt;Forbidden Scrollery&lt;/i&gt; chapter 40. This is my infodump flex.
&lt;br /&gt;
&lt;br /&gt;
...I'll shelve this particular aside now.
&lt;/aside&gt;

&lt;p&gt;But I think many subjects suffer from a lack of mid-level educational content.*
While there’s tons of tutorials for newcomers, and maybe even a handful of high-level, highly-specific
technical discussions by subject matter experts**,
a journeyperson who’s broken out of the beginner-level “tutorial zone” may find themselves frustrated
by a lack of obvious, discoverable resources suitable for their level.&lt;/p&gt;

&lt;p&gt;How do they learn?&lt;br /&gt;
How do they learn how to learn?&lt;/p&gt;

&lt;p&gt;I’ve found this to be true of both programming and fighting games, at least for myself. That’s why
I’m starting this series. Though I have no accomplishments nor expertise to my name, the act of putting
this resource together might still prove useful to someone, if only myself; and if it fails, stalls, or
falls short, then, well, probably nobody will see this, so it shall be no sweat off my brow anyway.
Even then, I might learn something in doing so.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Let’s begin by answering some preliminary questions.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Sorry, no, this isn’t the tutorial either.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;yeah-that-makes-sense&quot;&gt;YEAH, THAT MAKES SENSE&lt;/h2&gt;

&lt;h3 id=&quot;why-a-2d-fighter&quot;&gt;Why a 2D fighter?&lt;/h3&gt;

&lt;p&gt;This is because &lt;em&gt;Guilty Gear XX Accent Core +R&lt;/em&gt; is my current favourite fighting game, and also because
2D fighters are the ones I have the most knowledge of. In comparison, I know much less about 3D and
platform fighters; at best, I might be able to write the occasional addendum or errata where one of my
2D-centric comments does not hold in 3D or platform fighters. I also have a terrible gap in knowledge
about tag fighters. But we’ll get there when we get there.&lt;/p&gt;

&lt;p&gt;I will do my best to write a few comments on the differences between the various subcategories of
fighting games, but in the end it will fall to you to fill in the gaps. I hope that the rigors of 2D
that I provide will be enough to tee you up for whatever task you choose for yourself.&lt;/p&gt;

&lt;h3 id=&quot;why-pygame&quot;&gt;Why PyGame?&lt;/h3&gt;

&lt;p&gt;It is not necessary to learn how to program at the low level of any programming language in order to
create a fighting game; many excellent and free game engines, libraries, and frameworks are available
out there with a wealth of tutorialiterature to learn from, although I cannot guarantee that they will
have up-to-date tutorials specific to fighting games, and it feels a little disingenuous to ask you to
learn &lt;strong&gt;All of (eg.) Unity&lt;/strong&gt; through overly-general tutorials just to learn how to make your fighting game.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;Unity&lt;/em&gt; has a reputation for being the big, classic indie game engine, and the
&lt;a href=&quot;http://www.ufe3d.com/doku.php&quot;&gt;Universal Fighting Engine&lt;/a&gt; toolkit, used in titles like &lt;em&gt;Fight of Animals&lt;/em&gt;,
is an adept tool to create a fighting game. However, it comes with the caveat that UFE is not free.
In addition, I am obliged to report that &lt;em&gt;Unity&lt;/em&gt; (the company) has taken a questionable direction in recent years
&lt;a href=&quot;https://www.fool.com/investing/2022/07/24/most-troubling-thing-about-unitys-ironsource-deal/&quot;&gt;(1)&lt;/a&gt;
&lt;a href=&quot;https://www.vice.com/en/article/y3d4jy/unity-workers-question-company-ethics-as-it-expands-from-video-games-to-war&quot;&gt;(2)&lt;/a&gt;,
so you may wish to look for alternatives going into the future.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/article0/amongus-arena.png&quot; alt=&quot;Among Us Arena at Vancouver Street Battle screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Fight of Animals &lt;em&gt;and&lt;/em&gt; Fight of Machines &lt;em&gt;were made with Unity + UFE;&lt;/em&gt;
Among Us Arena Ultimate &lt;em&gt;was made in Unity directly.&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;Godot Engine&lt;/em&gt; is one such alternative, offering similar power to Unity while sticking to communal
open-source roots. It lends itself well to 3D assets in ways that other tools might not. Working in this
engine might be a good experience for making other kinds of games, too.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/article0/yomi-hustle.png&quot; alt=&quot;Your Only Move is Hustle screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Although not a traditional fighting game title, &lt;strike&gt;Yomi&lt;/strike&gt;&lt;/em&gt;
&lt;strong&gt;Y&lt;/strong&gt;our &lt;strong&gt;O&lt;/strong&gt;nly &lt;strong&gt;M&lt;/strong&gt;ove &lt;strong&gt;I&lt;/strong&gt;s Hustle &lt;em&gt;was made in Godot.&lt;/em&gt;&lt;/p&gt;

&lt;aside&gt;
If you'd like to weigh the quality of the MUGEN tool yourself, a spreadsheet of MUGEN games maintained by
Tumblr user &lt;a href=&quot;https://mugenfinder.tumblr.com/&quot;&gt;mugenfinder&lt;/a&gt; can be found
&lt;a href=&quot;https://docs.google.com/spreadsheets/d/1FMHlikel6MjlbojchEdS82VsE-ScQVhpkz9cVU_UL8M/edit#gid=0&quot;&gt;here&lt;/a&gt;.

&lt;br /&gt;
&lt;br /&gt;

- As told to me by mugenfinder, you can't sell games made with MUGEN for profit, but you can with IKEMEN GO.

&lt;/aside&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;MUGEN&lt;/em&gt;, the classic fighting game character kitchen sink, also offers immediate structure for those who
just want to slap their characters into a working thing immediately. I’m told it has a vibrant community
of &lt;em&gt;MUGEN&lt;/em&gt; enthusiasts and SaltyBettors backing it up, but I have not investigated the quality of the
program(s), the ease of use, or the tutorial support for making changes. Certainly I myself feel a stigma
that “proper” fighting games don’t come from &lt;em&gt;MUGEN&lt;/em&gt;, but I don’t know enough about it to say that for
certain.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/article0/battle-craze.png&quot; alt=&quot;Battle Craze screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=SpAg5rcEVh4&quot;&gt;Sarvets All-Stars&lt;/a&gt;, &lt;em&gt;one of the auction tournament games of
Combo Breaker 2018, was made using MUGEN, and&lt;/em&gt; &lt;a href=&quot;https://www.playbattlecraze.com/&quot;&gt;Battle Craze&lt;/a&gt;, &lt;em&gt;as seen
on &lt;a href=&quot;https://www.youtube.com/watch?v=iXd-HmrcbZc&quot;&gt;Will it Kill Episode 17&lt;/a&gt;, uses SUEHIRO’s I.K.E.M.E.N GO engine.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Then, why use a programming library like Pygame? I will not sugarcoat it for you - it’s no small deal of grief to
work with code directly. “True” originality is overrated, and though it may be satisfying to your ego,
as a developer and a programmer, you ought to avoid reinventing the wheel when possible.&lt;/p&gt;

&lt;p&gt;However, even so, there is something to be said about the satisfaction that comes from building something
from the ground up, the degree of control and understanding afforded to the programmer who starts from scratch.
I think there’s a lot that we can learn in doing so, even if it may be faster and/or easier to start
with a more approachable offering.&lt;/p&gt;

&lt;aside&gt;
* This is a subjective opinion. But I believe it fully.

&lt;br /&gt;
&lt;br /&gt;
** If you don't know what Delphi is, don't worry:
 neither do I. This probably says more about my lack of dev knowledge than it does about its popularity
as a programming language. But the point is that against all odds, video games get made, and against
even further odds, people don't even do it with the tools you'd expect them to. Occasionally you hear
about a cartel of extremely gifted wizards simulating a fully-featured copy of &lt;i&gt;Dwarf Fortress&lt;/i&gt;
in &lt;i&gt;Minecraft&lt;/i&gt;, or a miniature black hole. Or something. This world is full of miracles.

&lt;/aside&gt;

&lt;p&gt;As for the choice of Python and Pygame – let it be said that if there is a will, there is a way to make
a game with any tool given to you. For example, the cult classic shmup &lt;em&gt;Hellsinker.&lt;/em&gt;, one of the greatest
solo indie games of all time*,
&lt;a href=&quot;https://web.archive.org/web/20180819171301/http://mauve.mizuumi.net/2012/06/01/retrospective-hellsinker-translation-development#more-441&quot;&gt;was written in Delphi&lt;/a&gt;**.
&lt;a href=&quot;https://www.derekyu.com/makegames/deathloops.html&quot;&gt;Just finishing a game, any game at all&lt;/a&gt;,
setting aside the merits and difficulties of whichever particular medium you choose, is an achievement
that deserves celebration.&lt;/p&gt;

&lt;p&gt;But the last thing I will ask you to do is write a video game in (eg.) C, because&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;that is an unkind thing to ask someone to do,&lt;/li&gt;
  &lt;li&gt;I also would have to write a video game in (eg.) C, and I don’t want to.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can use any tool you like, but you probably shouldn’t choose something that only adds pain.&lt;/p&gt;

&lt;p&gt;There might be some things you truly can’t do anything about, but unrelated,
unfair pain points can and will wear down your willingness to work on your project, and
&lt;strong&gt;you absolutely must guard your motivation with your life.&lt;/strong&gt;
If you run out of motivation, there is a very real risk that your project will remain unfinished forever.&lt;/p&gt;

&lt;p&gt;Don’t agonize over the decision forever, but if you take a bit of time to pick your tools with some thought,
you can save a lot of pain.
And when you do come across pain points, take a bit of time to stop and identify them, and
perhaps invest a bit of time into reducing the pain to the best of your ability.&lt;/p&gt;

&lt;p&gt;Now, I consider Python to be a good starter language for a host of reasons:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You don’t have to write a small suite of esoteric-looking boilerplate code to print “Hello World”.&lt;/li&gt;
  &lt;li&gt;You don’t have to complete a small ritual to compile and build it.&lt;/li&gt;
  &lt;li&gt;Lists and dictionaries are within arms’ reach.&lt;/li&gt;
  &lt;li&gt;You don’t have to learn how to manage memory immediately. You don’t need to know what a pointer is.&lt;/li&gt;
  &lt;li&gt;It has a host of excellent learning resources, like
&lt;a href=&quot;https://automatetheboringstuff.com/#toc&quot;&gt;Automate the Boring Stuff&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;If you don’t finish your project, you can jump ship and use your newfound Python knowledge to
write programs for machine learning or statistical analysis. Probably.&lt;/li&gt;
  &lt;li&gt;It’s the language I started with, thus making it the best.&lt;/li&gt;
&lt;/ul&gt;

&lt;aside&gt;
It would have been &lt;i&gt;so sick&lt;/i&gt; if I recommended LOVE2D right after talking about love
for ten paragraphs, but I'm not quite comfortable enough with Lua to use it myself.
&lt;/aside&gt;

&lt;p&gt;There are surely a feast of wonderful languages that fulfill these criteria –
like Lua, for example, which offers the excellent &lt;a href=&quot;https://love2d.org/&quot;&gt;LOVE2D library&lt;/a&gt;
used in the top-notch shmup &lt;a href=&quot;http://bluerevolvergame.com/&quot;&gt;BLUE REVOLVER&lt;/a&gt; (among others).
I’ve chosen Python and Pygame for its comfort factor, and in truth, this is the most important factor.&lt;/p&gt;

&lt;aside&gt;
However, sometimes being stubborn really only just results in unnecessary pain that brings you closer
to the point of giving up or losing motivation. Thus there are also times where you must recognize
that you should bend the knee and do things the easy way, perhaps just temporarily, perhaps for the
rest of the way. You must learn these limits for yourself.
&lt;/aside&gt;

&lt;p&gt;Overcoming the learning curve of other, perhaps clunkier languages can definitely be done with a
little bit of stick-with-it stubbornness; if this is what you choose, you should still be able to
get something out of the problem statement and logic portions of each update, with just a little bit
of extra elbow grease to adapt the Pygame code to your language. But you can do it.
I have a baseless faith in your ability. Nevertheless, I encourage you.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Please feel free to write in with YOUR factual opinion about what the BEST first programming language
for new devs is. Or make a YouTube video with a loud thumbnail on it and reap those 15 cents of
AdSense revenue. Either/or.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;* &lt;em&gt;A technical article addressing PyGame and its reputation for being a slow library can be found
&lt;a href=&quot;https://blubberquark.tumblr.com/post/630054903238262784/why-pygame-is-slow&quot;&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;can-i-steal-this-code&quot;&gt;Can I steal this code?&lt;/h3&gt;

&lt;p&gt;You are free to use the code in this tutorial however you like. (That’s the MIT License included in this
site’s repository.) An acknowledgement of credit would be a
nice gesture, but I can’t really stop you if you don’t add one, and in the end it’s not a big deal.
But if these articles were useful to you, then I would love to hear about it. Write in! …Somewhere!
I’ll have to figure out an inbox or a comments section for this at some point.&lt;/p&gt;

&lt;p&gt;If you steal and claim credit for writing this tutorial I’ll be pretty miffed at you.
I’m not going to send you death threats or hire a dark web hitman or whatever, but like, come on. Let me have this.&lt;/p&gt;

&lt;h3 id=&quot;why-didnt-you-do-it-like-this&quot;&gt;Why did(n’t) you do it like this?&lt;/h3&gt;

&lt;p&gt;If something isn’t clear to you, leave a comment and I’ll do my best to answer. I’ve added this
grossly Wikia-looking Disqus integration to this end. I apologize for this affront to your sensibilities.&lt;/p&gt;

&lt;p&gt;If you know a better way to do things, feel free to let me know as well. I am not an expert programmer, and
there’s many things I don’t know. If the suggestion is good, I’m happy to update the relevant posts
with better code or better information.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/fgtutorial/2023/01/09/article0-5-preparations.html&quot;&gt;» Next: #0.5: Preparations&lt;/a&gt;&lt;/p&gt;</content><author><name>minogame</name></author><category term="fgtutorial" /><summary type="html">Good day. In this series of articles, I’ll be attempting to program a simple 2D fighting game using the Python game development library Pygame, documenting the process as I do so, working through the problem, the logic, and the code. There might be some arbitrary flavour tangents included as well, as I am not being paid to omit them.</summary></entry></feed>